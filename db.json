{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0},{"_id":"themes/next/source/robots.txt","path":"robots.txt","modified":0},{"_id":"themes/next/source/js/ua-parser.min.js","path":"js/ua-parser.min.js","modified":0},{"_id":"themes/next/source/js/nav-toggle.js","path":"js/nav-toggle.js","modified":0},{"_id":"themes/next/source/js/motion_global.js","path":"js/motion_global.js","modified":0},{"_id":"themes/next/source/js/motion_fallback.js","path":"js/motion_fallback.js","modified":0},{"_id":"themes/next/source/js/lazyload.js","path":"js/lazyload.js","modified":0},{"_id":"themes/next/source/js/hook-duoshuo.js","path":"js/hook-duoshuo.js","modified":0},{"_id":"themes/next/source/js/helpers.js","path":"js/helpers.js","modified":0},{"_id":"themes/next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":0},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":0},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0},{"_id":"themes/next/source/images/bkdefault_avatar.jpg","path":"images/bkdefault_avatar.jpg","modified":0},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0},{"_id":"themes/next/source/google423daad8b4b43137.html","path":"google423daad8b4b43137.html","modified":0},{"_id":"themes/next/source/fonts/icon-linecons/selection.json","path":"fonts/icon-linecons/selection.json","modified":0},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","path":"fonts/icon-linecons/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","path":"fonts/icon-linecons/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","path":"fonts/icon-linecons/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","path":"fonts/icon-linecons/icomoon.eot","modified":0},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","path":"fonts/icon-icomoon/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","path":"fonts/icon-icomoon/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","path":"fonts/icon-icomoon/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","path":"fonts/icon-icomoon/icomoon.eot","modified":0},{"_id":"themes/next/source/fonts/icon-fifty-shades/selection.json","path":"fonts/icon-fifty-shades/selection.json","modified":0},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","path":"fonts/icon-fifty-shades/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","path":"fonts/icon-fifty-shades/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","path":"fonts/icon-fifty-shades/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","path":"fonts/icon-fifty-shades/icomoon.eot","modified":0},{"_id":"themes/next/source/fonts/icon-feather/selection.json","path":"fonts/icon-feather/selection.json","modified":0},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","path":"fonts/icon-feather/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","path":"fonts/icon-feather/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","path":"fonts/icon-feather/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","path":"fonts/icon-feather/icomoon.eot","modified":0},{"_id":"themes/next/source/fonts/icon-default/selection.json","path":"fonts/icon-default/selection.json","modified":0},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","path":"fonts/icon-default/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","path":"fonts/icon-default/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","path":"fonts/icon-default/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","path":"fonts/icon-default/icomoon.eot","modified":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0},{"_id":"themes/next/source/baidu_verify_JT2eaVjdMy.html","path":"baidu_verify_JT2eaVjdMy.html","modified":0},{"_id":"themes/next/source/CNAME","path":"CNAME","modified":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":1}],"Cache":[{"_id":"source/_posts/2015-6-24-iOS-save-local-data.md","shasum":"dbbdf2edb57da928290805e5d96c73c86b7ef8b9","modified":1442310601000},{"_id":"source/_posts/2015-7-11-why-we-use-present-or-push.md","shasum":"19fd10623bd37c28585a49d263525dc3180e0248","modified":1442310601000},{"_id":"source/_posts/2015-7-16-Apple-Watch-Demo-1.md","shasum":"e6ba1aadc58e4de91a3e1756765676b5f2d2225f","modified":1442310601000},{"_id":"source/_posts/2015-6-23-Mac-OS-ssl.md","shasum":"3ac99ad6b334dd5aabc044931b48ca54af180416","modified":1442310601000},{"_id":"source/_posts/2015-7-2-readNotes-about-iOSPro.md","shasum":"fa2ad0a83de04a63f4ede7904a04b0c601dfe8af","modified":1442310601000},{"_id":"source/_posts/2015-7-26-prepare-my-own-vps1.md","shasum":"f86dd2207fcf317c4c725653687ee2f3a3684bd5","modified":1442310601000},{"_id":"source/_posts/2015-7-26-prepare-my-own-vps2.md","shasum":"90f2f30ac0388ec894571470cdba00d3876f912e","modified":1442310601000},{"_id":"source/_posts/2015-8-29-fullstack-of-Scrapy+MySQL+PHP+Swift2.md","shasum":"ccc8d993b4a2e0ad58292fab66ca463455561de2","modified":1442310601000},{"_id":"source/_posts/2015-7-4-WWDC-2015-APP-Thinning.md","shasum":"df2f6a7ce336edb1eb44bf9324b412c39f92011a","modified":1442310601000},{"_id":"source/_posts/2015-8-8-fullstack-of-Scrapy+MySQL+PHP+Swift.md","shasum":"fa5910f21843de533fa20e91c94ab3b20978d4c9","modified":1442310601000},{"_id":"source/_posts/2015-9-1-use-adhoc-with-upyun.md","shasum":"5585691ea0e1a8cff564f67456c20f271ce173fc","modified":1442310601000},{"_id":"source/_posts/2015-9-10-fullstack-of-Scrapy+MySQL+PHP+Swift6.md","shasum":"319ea3df5e388bb5da0614c9ee2f5236732da6fc","modified":1442310601000},{"_id":"source/_posts/2015-9-3-fullstack-of-Scrapy+MySQL+PHP+Swift3.md","shasum":"6efdd198785656f6df3730a6183091023b60fd14","modified":1442310601000},{"_id":"source/_posts/2015-9-8-fullstack-of-Scrapy+MySQL+PHP+Swift4.md","shasum":"7446343f6c1689b5c5192971ed7db9a1bb9de032","modified":1442310601000},{"_id":"source/_posts/2015-9-9-fullstack-of-Scrapy+MySQL+PHP+Swift5.md","shasum":"75b7e7ce41bb0a5ac8ab0be4e5be18740a4d97b7","modified":1442310601000},{"_id":"source/about/index.md","shasum":"4ae696bcce94c3d43fce70c89c99357d20f95bf9","modified":1442310601000},{"_id":"source/tags/index.md","shasum":"a912094a7516c8d6728df418d046d97fede7f733","modified":1442310601000},{"_id":"themes/next/source/css/_common/_page/home.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1442280703000},{"_id":"themes/next/source/css/_mixins/Mist.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1442280703000},{"_id":"themes/next/source/css/_mixins/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1442280703000},{"_id":"themes/next/source/css/_mixins/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1442280703000},{"_id":"themes/next/source/css/_variables/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1442280703000},{"_id":"themes/next/source/css/_variables/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1442280703000},{"_id":"themes/next/README.en.md","shasum":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1442280703000},{"_id":"themes/next/README.md","shasum":"3319de8565699fc9642f76c41ee96b50f2234b6a","modified":1442280703000},{"_id":"themes/next/_config.yml","shasum":"21c9eb100201c8e934ea522edbc696eac2363f0a","modified":1442539346000},{"_id":"themes/next/bower.json","shasum":"1bdb0641bdcb9b5b154d2e379c57fe5675f06b9c","modified":1442280703000},{"_id":"themes/next/languages/de.yml","shasum":"7a8de0e5665c52a1bf168c1e7dd222c8a74fb0ab","modified":1442280703000},{"_id":"themes/next/languages/default.yml","shasum":"7e65ef918f16d0189055deb5f1616b9dedcb1920","modified":1442280703000},{"_id":"themes/next/languages/en.yml","shasum":"7e65ef918f16d0189055deb5f1616b9dedcb1920","modified":1442280703000},{"_id":"themes/next/languages/fr-FR.yml","shasum":"6d097445342a9fb5235afea35d65bf5271b772f0","modified":1442280703000},{"_id":"themes/next/languages/ru.yml","shasum":"b4a827b9ddac9d5f6dca096fe513aeafb46a3e93","modified":1442280703000},{"_id":"themes/next/languages/zh-Hans.yml","shasum":"8af76df5557561050a950bdd7091d3bb3939c5c0","modified":1442280703000},{"_id":"themes/next/languages/zh-hk.yml","shasum":"3fc38103c9efa6f6c37149adbddb014ff85ec849","modified":1442280703000},{"_id":"themes/next/languages/zh-tw.yml","shasum":"8897a06e521b36c7a1226c72057c8357611eded8","modified":1442280703000},{"_id":"themes/next/layout/_layout.swig","shasum":"54f049f8045d386587c1e5d9761c517553b79712","modified":1442280703000},{"_id":"themes/next/layout/_macro/post-collapse.swig","shasum":"42927bdde998cefd3cf4f19b0476d69bd9e5116a","modified":1442280703000},{"_id":"themes/next/layout/_macro/post.swig","shasum":"598b3085b6b74f4664eb66e6ae8737920e07d7a9","modified":1442280703000},{"_id":"themes/next/layout/_macro/sidebar.swig","shasum":"b0c467b42073270db7db41907ce8881f64bf3793","modified":1442280703000},{"_id":"themes/next/layout/_partials/footer.swig","shasum":"44d513401032362655c40cae66e579dba8dd3d85","modified":1442280703000},{"_id":"themes/next/layout/_partials/head.swig","shasum":"c96f50229b5d26687ec47f628cf3770b2cff8914","modified":1442280703000},{"_id":"themes/next/layout/_partials/header.swig","shasum":"eefb48589ed5b0894ac46883608618ac8a4dba3c","modified":1442280703000},{"_id":"themes/next/layout/_partials/old-browsers.swig","shasum":"dbbfea810bf3a2ed9c83b9a6683037175aacfc67","modified":1442280703000},{"_id":"themes/next/layout/_partials/pagination.swig","shasum":"d6c7f04eee4388d8f133eb5526b7c0875c321a30","modified":1442280703000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","shasum":"00c2b49f6289198b0b2b4e157e4ee783277f32a7","modified":1442280703000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","shasum":"2f92046e0b50ebd65abb7045b1cbbfc50abbb034","modified":1442280703000},{"_id":"themes/next/layout/_partials/search.swig","shasum":"64f14da26792a17bc27836c4e9d83190175f36e6","modified":1442280703000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","shasum":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1442280703000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","shasum":"63315fcf210799f894208c9f512737096df84962","modified":1442280703000},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","shasum":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1442280703000},{"_id":"themes/next/layout/_scripts/analytics/google-analytics.swig","shasum":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1442280703000},{"_id":"themes/next/layout/_scripts/analytics.swig","shasum":"0ebbf76c2317faa8ba31365adba59331c2e0262c","modified":1442280703000},{"_id":"themes/next/layout/_scripts/baidushare.swig","shasum":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1442280703000},{"_id":"themes/next/layout/_scripts/bootstrap.scrollspy.swig","shasum":"85295f126836b95f0837d03e58228bb3cf8c4490","modified":1442280703000},{"_id":"themes/next/layout/_scripts/comments/disqus.swig","shasum":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1442280703000},{"_id":"themes/next/layout/_scripts/comments/duoshuo.swig","shasum":"63b9648dcc03dc2536a7a887185fb15acfabceb4","modified":1442280703000},{"_id":"themes/next/layout/_scripts/fancy-box.swig","shasum":"41b4ff1446060c88c33bf666a32277dcf12129f0","modified":1442280703000},{"_id":"themes/next/layout/_scripts/helpers.swig","shasum":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1442280703000},{"_id":"themes/next/layout/_scripts/mathjax.swig","shasum":"abc52fefb276c52cbb19de5c214521dfcf2a10fd","modified":1442280703000},{"_id":"themes/next/layout/_scripts/motion.swig","shasum":"817705bfd1a1282cb6bf59094afe507e11455aa0","modified":1442280703000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","shasum":"b63ef233886538f30ced60344ac15d25e5f3e0af","modified":1442280703000},{"_id":"themes/next/layout/archive.swig","shasum":"0c3ce594759f347ea90a4ce592a7a18e2ae4cc5c","modified":1442280703000},{"_id":"themes/next/layout/category.swig","shasum":"d6b3e1dc5e0b8deade9a084c463126e70188ee9b","modified":1442280703000},{"_id":"themes/next/layout/index.swig","shasum":"fdc801f0da71a2eb205ce9c0b12f156b219fdc9c","modified":1442280703000},{"_id":"themes/next/layout/page.swig","shasum":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1442280703000},{"_id":"themes/next/layout/post.swig","shasum":"a84457e8ced46e63bc7a8a9e0541a6ba53122a92","modified":1442280703000},{"_id":"themes/next/layout/tag.swig","shasum":"aab44af54fcbc66fea4ad12b2767ffca3eadd451","modified":1442280703000},{"_id":"themes/next/scripts/merge-configs.js","shasum":"dfd147d1317e56d283f5e779f00608e913603b51","modified":1442280703000},{"_id":"themes/next/scripts/tags/center-quote.js","shasum":"37274f743c2054244dcbbde56fba9ff353414281","modified":1442280703000},{"_id":"themes/next/scripts/tags/full-image.js","shasum":"0d69739d1bad5861a4a6ff2db511c3669783e438","modified":1442280703000},{"_id":"themes/next/source/404.html","shasum":"f7d32c6d1ddac7caa964d346c19e920fa7b3986f","modified":1442539083000},{"_id":"themes/next/source/CNAME","shasum":"93f8a3c8645b8202911703414a19973bd7138da2","modified":1442304483000},{"_id":"themes/next/source/baidu_verify_JT2eaVjdMy.html","shasum":"b99ec40dcc60159702fdbea4deeaa01b9dc857ca","modified":1442385520000},{"_id":"themes/next/source/css/_common/_component/back-to-top.styl","shasum":"88cd66910260006aa8e9e795df4948d4b67bfa11","modified":1442280703000},{"_id":"themes/next/source/css/_common/_component/buttons.styl","shasum":"81063e0979f04a0f9af37f321d7321dda9abf593","modified":1442280703000},{"_id":"themes/next/source/css/_common/_component/comments.styl","shasum":"54e73681ba6f57ef961138f94d2ee8ac845990c3","modified":1442280703000},{"_id":"themes/next/source/css/_common/_component/duoshuo.styl","shasum":"c307f1e4827d7cb82816a5f9de109ae14ed4199c","modified":1442280703000},{"_id":"themes/next/source/css/_common/_component/gallery.styl","shasum":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1442280703000},{"_id":"themes/next/source/css/_common/_component/jiathis.styl","shasum":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1442280703000},{"_id":"themes/next/source/css/_common/_component/pagination.styl","shasum":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1442280703000},{"_id":"themes/next/source/css/_common/_component/posts-collapse.styl","shasum":"8f9e8f5f65956ccf1d52ff8526392803dff579d3","modified":1442280703000},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","shasum":"4b82dbbb6e536e6e8ee3cec6e62c2fd4bea60a09","modified":1442280703000},{"_id":"themes/next/source/css/_common/_component/posts-type.styl","shasum":"40b593134bf96d1d6095b3439d47820659d7f10b","modified":1442280703000},{"_id":"themes/next/source/css/_common/_component/tag-cloud.styl","shasum":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1442280703000},{"_id":"themes/next/source/css/_common/_core/base.styl","shasum":"e79a08484b191dca14ccfc005053eb95786dafae","modified":1442280703000},{"_id":"themes/next/source/css/_common/_core/helpers.styl","shasum":"41a31d651b60b4f458fc56a1d191dfbbdcb6d794","modified":1442280703000},{"_id":"themes/next/source/css/_common/_core/normalize.styl","shasum":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1442280703000},{"_id":"themes/next/source/css/_common/_core/scaffolding.styl","shasum":"cbd7f1d5c72e3024b5d70dafb6ca93e2723652ab","modified":1442280703000},{"_id":"themes/next/source/css/_common/_core/tables.styl","shasum":"f142a185fda68bc579e89ead9a31bc8fa0f3ca8c","modified":1442280703000},{"_id":"themes/next/source/css/_common/_fonts/icon-default.styl","shasum":"8b809aef383bebaeb3f282b47675f3a364ce3569","modified":1442280703000},{"_id":"themes/next/source/css/_common/_fonts/icon-feather.styl","shasum":"80413afacfa656322100ce1900fed1ebcd8f8f44","modified":1442280703000},{"_id":"themes/next/source/css/_common/_fonts/icon-fifty-shades.styl","shasum":"249f75bafa26b99d272352c0646e7497ea680b39","modified":1442280703000},{"_id":"themes/next/source/css/_common/_fonts/icon-font.styl","shasum":"ec3f86739bede393cafcd3e31052c01115ae20d6","modified":1442280703000},{"_id":"themes/next/source/css/_common/_fonts/icon-linecons.styl","shasum":"9cdbedb3627ac941cfb063b152abe5a75c3c699a","modified":1442280703000},{"_id":"themes/next/source/css/_common/_page/archive.styl","shasum":"dff879f55ca65fa79c07e9098719e53eeea7ac88","modified":1442280703000},{"_id":"themes/next/source/css/_common/_page/categories.styl","shasum":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1442280703000},{"_id":"themes/next/source/css/_common/_page/post-detail.styl","shasum":"73796f6f13caa7151a2ee8e55755627e0d189f55","modified":1442280703000},{"_id":"themes/next/source/css/_common/_section/body.styl","shasum":"ca1a4766cbe25baac757c6b47a4858d221afdc40","modified":1442280703000},{"_id":"themes/next/source/css/_common/_section/footer.styl","shasum":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1442280703000},{"_id":"themes/next/source/css/_common/_section/header.styl","shasum":"ba501332fb111bd72dc0777f2e1c8a29ad538ff9","modified":1442280703000},{"_id":"themes/next/source/css/_common/_section/layout.styl","shasum":"4daaadd156ece64ae05908ad6bb0159c8a27c071","modified":1442280703000},{"_id":"themes/next/source/css/_common/_section/media.styl","shasum":"fa9809d2ecc753cf32f70803c1d0821c405211f4","modified":1442280703000},{"_id":"themes/next/source/css/_common/_section/sidebar.styl","shasum":"d57e1769ebd2c472d2b27d17a706d3f564f94033","modified":1442280703000},{"_id":"themes/next/source/css/_common/_vendor/highlight/highlight.styl","shasum":"f3529b7da284c4b859429573c9b1004d32937e40","modified":1442280703000},{"_id":"themes/next/source/css/_common/_vendor/highlight/theme.styl","shasum":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1442280703000},{"_id":"themes/next/source/css/_custom/custom.styl","shasum":"68b6859fb48fe8358e567fc324f218cecfc3a533","modified":1442280703000},{"_id":"themes/next/source/css/_mixins/base.styl","shasum":"66985fe77bd323f7f8f634908e17166f51e96e95","modified":1442280703000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","shasum":"f3f4fac628d0b588cb40795d498110d33b11ce26","modified":1442280703000},{"_id":"themes/next/source/css/_schemes/default/_menu.styl","shasum":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1442280703000},{"_id":"themes/next/source/css/_schemes/default/_search.styl","shasum":"c524bccdc554349106d1c8be9c3f275d4c0d4281","modified":1442280703000},{"_id":"themes/next/source/css/_schemes/default/index.styl","shasum":"2588e55132e10d82c0608f03c2c72a2bace8fa4e","modified":1442280703000},{"_id":"themes/next/source/css/_variables/Mist.styl","shasum":"f5dda1ca48c1b73a0bd34e08413de57699f24083","modified":1442280703000},{"_id":"themes/next/source/css/_variables/base.styl","shasum":"66e94d53e65a739c21111440b891d0d98068062b","modified":1442280703000},{"_id":"themes/next/source/css/main.styl","shasum":"b05c342e94ded24a5f2b203cedf77d3faa817fd5","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","shasum":"90763e97be18be78e65749075225cceeddc6fa8a","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","shasum":"f92ad8cddc250f0bb5ca466fca95d321987e127e","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","shasum":"c093408e6030221cafc1f79d897f1fb5283c1178","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","shasum":"dbe0368f2a65d87b13234cfea29d9783892fc7a8","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-default/selection.json","shasum":"dc07c29f687315f9458f6b251c214768af865fb2","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","shasum":"11554b9e9d5b9f535ba96cbb27d45d8c8f1689fd","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","shasum":"d5eb756eefda9b454dcb23c2b1cefd4051d18d41","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","shasum":"b2bbae4b613403cf61ad25037913378da1c07b8f","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","shasum":"2ea1c59c17422798e64ee6f4e9ce1f7aff1a06a5","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-feather/selection.json","shasum":"06ea91e3f98ebe1080087acad4356802bc5b6ebf","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","shasum":"da86ba5df72d1288de9e9633e5f528062dd427d5","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","shasum":"1a4afd739e1f8eb8d430dbdd29e36a9999802e8d","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","shasum":"72fe82e1f3db52414eed706952d385af241cb196","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","shasum":"4de6a74f523dee33d95dde61caae5809f9a5d448","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-fifty-shades/selection.json","shasum":"fdd09098d1c3688e2c88cf33fd51e76b383b6d7f","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","shasum":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","shasum":"e316347805eb93425faa678611c5e42a7152da8f","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","shasum":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","shasum":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","shasum":"e2d7f040428a632f3c50bfa94083b759936effc2","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","shasum":"808eaf7d61f7e67c76976265c885e79c36920f0b","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","shasum":"078068206684e4f185b0187ad3cee16f54a287d7","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","shasum":"0b07ee6ceda3b1bceb40c1e7379b3aa48dcc15a8","modified":1442280703000},{"_id":"themes/next/source/fonts/icon-linecons/selection.json","shasum":"db4ce25d31449ecc6685b32e145252103967bb5c","modified":1442280703000},{"_id":"themes/next/source/google423daad8b4b43137.html","shasum":"363d2c8d7f3d9cb3f474c1c3404b6983e48ab804","modified":1441591757000},{"_id":"themes/next/source/images/bkdefault_avatar.jpg","shasum":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc","modified":1442280703000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1442280703000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1442280703000},{"_id":"themes/next/source/images/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1442280703000},{"_id":"themes/next/source/images/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1442280703000},{"_id":"themes/next/source/images/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1442280703000},{"_id":"themes/next/source/images/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1442280703000},{"_id":"themes/next/source/images/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1442280703000},{"_id":"themes/next/source/images/loading.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1442280703000},{"_id":"themes/next/source/images/placeholder.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1442280703000},{"_id":"themes/next/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1442280703000},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1442280703000},{"_id":"themes/next/source/js/fancy-box.js","shasum":"116cafc741e048497287121a508d7a54c050c70c","modified":1442280703000},{"_id":"themes/next/source/js/helpers.js","shasum":"c2117b0ec653df4c45dd9d9575b190cbe1035335","modified":1442280703000},{"_id":"themes/next/source/js/hook-duoshuo.js","shasum":"ea30e91c6b7fdaa6dce4a848f25cdf90436b072a","modified":1442280703000},{"_id":"themes/next/source/js/lazyload.js","shasum":"b92e9acdc7afc15468314c03f4a643b0c93944cf","modified":1442280703000},{"_id":"themes/next/source/js/motion_fallback.js","shasum":"a767d522c65a8b2fbad49135c9332135c6785c3e","modified":1442280703000},{"_id":"themes/next/source/js/motion_global.js","shasum":"367e329b2cc19c6b7634ea2917a218c84a22ec17","modified":1442280703000},{"_id":"themes/next/source/js/nav-toggle.js","shasum":"78b59f1beb12adea0d7f9bcf4377cb699963f220","modified":1442280703000},{"_id":"themes/next/source/js/ua-parser.min.js","shasum":"acf0ee6a47ffb7231472b56e43996e3f947c258a","modified":1442280703000},{"_id":"themes/next/source/robots.txt","shasum":"23b10987fb55a1dd591db7012cb74735fa6e4460","modified":1442383361000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1442280703000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1442280703000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1442280703000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1442280703000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1442280703000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1442280703000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1442280703000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1442280703000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1442280703000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1442280703000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1442280703000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1442280703000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1442280703000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1442280703000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1442280703000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1442280703000},{"_id":"themes/next/source/vendors/fastclick/README.md","shasum":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1442280703000},{"_id":"themes/next/source/vendors/fastclick/bower.json","shasum":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1442280703000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","shasum":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1442280703000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1442280703000},{"_id":"themes/next/source/vendors/velocity/bower.json","shasum":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1442280703000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1442280703000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1442280703000},{"_id":"themes/next/test/helpers.js","shasum":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1442280703000},{"_id":"themes/next/test/intern.js","shasum":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1442280703000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1442280703000},{"_id":"themes/next/source/images/avatar.jpg","shasum":"43b6f3767d16867b3dca75cc7ff4a2c826a1ecf4","modified":1442300935000},{"_id":"themes/next/source/vendors/jquery/index.js","shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1442280703000},{"_id":"themes/next/source/vendors/velocity/velocity.js","shasum":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1442280703000},{"_id":"public/vendors/velocity/velocity.ui.min.js","modified":1442543206227,"shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908"},{"_id":"public/vendors/velocity/velocity.ui.js","modified":1442543206231,"shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df"},{"_id":"public/vendors/velocity/velocity.min.js","modified":1442543206233,"shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6"},{"_id":"public/vendors/velocity/velocity.js","modified":1442543206237,"shasum":"9f08181baea0cc0e906703b7e5df9111b9ef3373"},{"_id":"public/vendors/velocity/bower.json","modified":1442543206241,"shasum":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409"},{"_id":"public/vendors/jquery/index.js","modified":1442543206243,"shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276"},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","modified":1442543206245,"shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18"},{"_id":"public/vendors/fastclick/lib/fastclick.js","modified":1442543206247,"shasum":"06cef196733a710e77ad7e386ced6963f092dc55"},{"_id":"public/vendors/fastclick/bower.json","modified":1442543206248,"shasum":"4dcecf83afddba148464d5339c93f6d0aa9f42e9"},{"_id":"public/vendors/fastclick/README.html","modified":1442543206254,"shasum":"4a6074903daa9004301ef30a6fb96556ba3eab60"},{"_id":"public/vendors/fastclick/LICENSE","modified":1442543206262,"shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","modified":1442543206265,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","modified":1442543206267,"shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","modified":1442543206268,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1442543206269,"shasum":"53e194f4a72e649c04fb586dd57762b8c022800b"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1442543206279,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1442543206281,"shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1442543206283,"shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1442543206284,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1442543206286,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","modified":1442543206288,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","modified":1442543206290,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","modified":1442543206318,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","modified":1442543206320,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","modified":1442543206323,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/vendors/fancybox/source/blank.gif","modified":1442543206325,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/robots.txt","modified":1442543206327,"shasum":"23b10987fb55a1dd591db7012cb74735fa6e4460"},{"_id":"public/js/ua-parser.min.js","modified":1442543206329,"shasum":"acf0ee6a47ffb7231472b56e43996e3f947c258a"},{"_id":"public/js/nav-toggle.js","modified":1442543206332,"shasum":"78b59f1beb12adea0d7f9bcf4377cb699963f220"},{"_id":"public/js/motion_global.js","modified":1442543206334,"shasum":"367e329b2cc19c6b7634ea2917a218c84a22ec17"},{"_id":"public/js/motion_fallback.js","modified":1442543206336,"shasum":"a767d522c65a8b2fbad49135c9332135c6785c3e"},{"_id":"public/js/lazyload.js","modified":1442543206337,"shasum":"b92e9acdc7afc15468314c03f4a643b0c93944cf"},{"_id":"public/js/hook-duoshuo.js","modified":1442543206339,"shasum":"5f722b3967d50cc1e36efaa5e2a4a0ad464496b0"},{"_id":"public/js/helpers.js","modified":1442543206342,"shasum":"c2117b0ec653df4c45dd9d9575b190cbe1035335"},{"_id":"public/js/fancy-box.js","modified":1442543206344,"shasum":"116cafc741e048497287121a508d7a54c050c70c"},{"_id":"public/js/bootstrap.scrollspy.js","modified":1442543206345,"shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625"},{"_id":"public/images/searchicon.png","modified":1442543206347,"shasum":"67727a6a969be0b2659b908518fa6706eed307b8"},{"_id":"public/images/placeholder.gif","modified":1442543206349,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/loading.gif","modified":1442543206351,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/cc-zero.svg","modified":1442543206353,"shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030"},{"_id":"public/images/cc-by.svg","modified":1442543206358,"shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e"},{"_id":"public/images/cc-by-sa.svg","modified":1442543206362,"shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e"},{"_id":"public/images/cc-by-nd.svg","modified":1442543206364,"shasum":"c563508ce9ced1e66948024ba1153400ac0e0621"},{"_id":"public/images/cc-by-nc.svg","modified":1442543206366,"shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7"},{"_id":"public/images/cc-by-nc-sa.svg","modified":1442543206368,"shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e"},{"_id":"public/images/cc-by-nc-nd.svg","modified":1442543206370,"shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564"},{"_id":"public/images/bkdefault_avatar.jpg","modified":1442543206374,"shasum":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc"},{"_id":"public/images/avatar.jpg","modified":1442543206378,"shasum":"43b6f3767d16867b3dca75cc7ff4a2c826a1ecf4"},{"_id":"public/google423daad8b4b43137.html","modified":1442543206380,"shasum":"363d2c8d7f3d9cb3f474c1c3404b6983e48ab804"},{"_id":"public/fonts/icon-linecons/selection.json","modified":1442543206382,"shasum":"68da6ea1b3ab9355d42694bf5745071cdefa4a65"},{"_id":"public/fonts/icon-linecons/icomoon.woff","modified":1442543206386,"shasum":"0b07ee6ceda3b1bceb40c1e7379b3aa48dcc15a8"},{"_id":"public/fonts/icon-linecons/icomoon.ttf","modified":1442543206390,"shasum":"078068206684e4f185b0187ad3cee16f54a287d7"},{"_id":"public/fonts/icon-linecons/icomoon.svg","modified":1442543206392,"shasum":"808eaf7d61f7e67c76976265c885e79c36920f0b"},{"_id":"public/fonts/icon-linecons/icomoon.eot","modified":1442543206394,"shasum":"e2d7f040428a632f3c50bfa94083b759936effc2"},{"_id":"public/fonts/icon-icomoon/icomoon.woff","modified":1442543206395,"shasum":"05f1ec0bd307da5e731a86eb4961589a6042aebb"},{"_id":"public/fonts/icon-icomoon/icomoon.ttf","modified":1442543206398,"shasum":"f399713d1c9400d4d3373e38991a7e362a754a94"},{"_id":"public/fonts/icon-icomoon/icomoon.svg","modified":1442543206400,"shasum":"e316347805eb93425faa678611c5e42a7152da8f"},{"_id":"public/fonts/icon-icomoon/icomoon.eot","modified":1442543206402,"shasum":"301fcf00c24750dddf1c529f944ca62c7f1a217d"},{"_id":"public/fonts/icon-fifty-shades/selection.json","modified":1442543206404,"shasum":"e5a5042e8e516b1d30fa3b1206d2c74921cec72b"},{"_id":"public/fonts/icon-fifty-shades/icomoon.woff","modified":1442543206406,"shasum":"4de6a74f523dee33d95dde61caae5809f9a5d448"},{"_id":"public/fonts/icon-fifty-shades/icomoon.ttf","modified":1442543206409,"shasum":"72fe82e1f3db52414eed706952d385af241cb196"},{"_id":"public/fonts/icon-fifty-shades/icomoon.svg","modified":1442543206411,"shasum":"1a4afd739e1f8eb8d430dbdd29e36a9999802e8d"},{"_id":"public/fonts/icon-fifty-shades/icomoon.eot","modified":1442543206414,"shasum":"da86ba5df72d1288de9e9633e5f528062dd427d5"},{"_id":"public/fonts/icon-feather/selection.json","modified":1442543206416,"shasum":"d95a90b0d541e48b049902090c0d008ad92b4115"},{"_id":"public/fonts/icon-feather/icomoon.woff","modified":1442543206419,"shasum":"2ea1c59c17422798e64ee6f4e9ce1f7aff1a06a5"},{"_id":"public/fonts/icon-feather/icomoon.ttf","modified":1442543206422,"shasum":"b2bbae4b613403cf61ad25037913378da1c07b8f"},{"_id":"public/fonts/icon-feather/icomoon.svg","modified":1442543206426,"shasum":"d5eb756eefda9b454dcb23c2b1cefd4051d18d41"},{"_id":"public/fonts/icon-feather/icomoon.eot","modified":1442543206427,"shasum":"11554b9e9d5b9f535ba96cbb27d45d8c8f1689fd"},{"_id":"public/fonts/icon-default/selection.json","modified":1442543206429,"shasum":"ff1b9b78eced4d0368d14cc192ac67a0dd498593"},{"_id":"public/fonts/icon-default/icomoon.woff","modified":1442543206434,"shasum":"dbe0368f2a65d87b13234cfea29d9783892fc7a8"},{"_id":"public/fonts/icon-default/icomoon.ttf","modified":1442543206435,"shasum":"c093408e6030221cafc1f79d897f1fb5283c1178"},{"_id":"public/fonts/icon-default/icomoon.svg","modified":1442543206439,"shasum":"f92ad8cddc250f0bb5ca466fca95d321987e127e"},{"_id":"public/fonts/icon-default/icomoon.eot","modified":1442543206444,"shasum":"90763e97be18be78e65749075225cceeddc6fa8a"},{"_id":"public/css/main.css","modified":1442543206892,"shasum":"5192afa166642f5fa24cb8e08e20aac1fd44e592"},{"_id":"public/baidu_verify_JT2eaVjdMy.html","modified":1442543206983,"shasum":"b99ec40dcc60159702fdbea4deeaa01b9dc857ca"},{"_id":"public/CNAME","modified":1442543206985,"shasum":"93f8a3c8645b8202911703414a19973bd7138da2"},{"_id":"public/404.html","modified":1442543206986,"shasum":"f7d32c6d1ddac7caa964d346c19e920fa7b3986f"},{"_id":"public/tags/index.html","modified":1442543207040,"shasum":"b8f8b721b108457cedf9c5f0470addddd432b107"},{"_id":"public/about/index.html","modified":1442543207082,"shasum":"a5fb716e975c0891cca4f4355f18c2b3c3befcd7"},{"_id":"public/2015/09/10/2015-9-10-fullstack-of-Scrapy-MySQL-PHP-Swift6/index.html","modified":1442543207166,"shasum":"67367160d2829cd9c02eabddeae0ca15da819b9c"},{"_id":"public/2015/09/09/2015-9-9-fullstack-of-Scrapy-MySQL-PHP-Swift5/index.html","modified":1442543207227,"shasum":"b299ff87c9cd907fb0d3c40206ffd65bc3c3de89"},{"_id":"public/2015/09/08/2015-9-8-fullstack-of-Scrapy-MySQL-PHP-Swift4/index.html","modified":1442543207269,"shasum":"b29ffb6e32908c00e908627acb1a9292d7c14c02"},{"_id":"public/2015/09/03/2015-9-3-fullstack-of-Scrapy-MySQL-PHP-Swift3/index.html","modified":1442543207321,"shasum":"df4d375a3a57acd1c2552b12e8a429c0519fd6cb"},{"_id":"public/2015/09/01/2015-9-1-use-adhoc-with-upyun/index.html","modified":1442543207365,"shasum":"3e43ee95885b57456dadd6fe26b1634996c64551"},{"_id":"public/2015/08/29/2015-8-29-fullstack-of-Scrapy-MySQL-PHP-Swift2/index.html","modified":1442543207414,"shasum":"320c6d4e1ac79662713a2c3620c6f449299c6999"},{"_id":"public/2015/08/08/2015-8-8-fullstack-of-Scrapy-MySQL-PHP-Swift/index.html","modified":1442543207455,"shasum":"4ac064c459b8591757c40be00def5b90bcc1efc4"},{"_id":"public/2015/08/01/2015-7-26-prepare-my-own-vps2/index.html","modified":1442543207504,"shasum":"ee77fb502f767522ec160fb9059a4a9303c05863"},{"_id":"public/2015/07/26/2015-7-26-prepare-my-own-vps1/index.html","modified":1442543207543,"shasum":"3ba98e7c2c96da8db6e67bbab14fec0ce484cd29"},{"_id":"public/2015/07/16/2015-7-16-Apple-Watch-Demo-1/index.html","modified":1442543207598,"shasum":"5b17d2457897693ba7e4e1984c6492d42b6c6c74"},{"_id":"public/2015/07/11/2015-7-11-why-we-use-present-or-push/index.html","modified":1442543207642,"shasum":"d6e33368e44aeb044615c26797e7667b09e9608d"},{"_id":"public/2015/07/04/2015-7-4-WWDC-2015-APP-Thinning/index.html","modified":1442543207689,"shasum":"03d610bd9a452e8d050260885e30c486f4e8cba4"},{"_id":"public/2015/07/02/2015-7-2-readNotes-about-iOSPro/index.html","modified":1442543207727,"shasum":"d802fad68470bf7677233e61dd53e44901b31b1d"},{"_id":"public/2015/06/24/2015-6-24-iOS-save-local-data/index.html","modified":1442543207779,"shasum":"abe7947daf22c281b495177339ce6ca794a607ff"},{"_id":"public/2015/06/23/2015-6-23-Mac-OS-ssl/index.html","modified":1442543207822,"shasum":"5b6e5783f12cb5cb9b7db87fe788f9f58c151ba0"},{"_id":"public/archives/index.html","modified":1442543207888,"shasum":"effc20089cf7369da20ab0bbf11d807f4f82a2a8"},{"_id":"public/archives/page/2/index.html","modified":1442543207933,"shasum":"68c6ff264cc18aed6e44f19de52a2ebf91b44909"},{"_id":"public/archives/2015/index.html","modified":1442543207989,"shasum":"821337eb5eb6c2bde7169dc907edc95c470187a7"},{"_id":"public/archives/2015/page/2/index.html","modified":1442543208040,"shasum":"679f12394ecf7ad031a14456b9491ca2438f7d4a"},{"_id":"public/archives/2015/06/index.html","modified":1442543208076,"shasum":"01aadf60030a9b428aaf0802149d3ce41d171834"},{"_id":"public/archives/2015/07/index.html","modified":1442543208123,"shasum":"9a82a57c6ccd359e361cef54614acd3d8a439442"},{"_id":"public/archives/2015/08/index.html","modified":1442543208165,"shasum":"0750e107e13d519e7e9edb0ee1918b45e55221a7"},{"_id":"public/archives/2015/09/index.html","modified":1442543208218,"shasum":"562cf3409c85f97caaee0b32948fa2e3f9ffe7f0"},{"_id":"public/categories/jekyll-update/index.html","modified":1442543208263,"shasum":"a0f100fc468f54236ee95950181b0f25fb2414f0"},{"_id":"public/index.html","modified":1442543208334,"shasum":"0188efc10b5bac28649623b9f8a0a4ad0ab4ee8a"},{"_id":"public/page/2/index.html","modified":1442543208391,"shasum":"a7f8853f7b7541c0ae12e8dc94ba929dff8b7f08"},{"_id":"public/tags/Linux/index.html","modified":1442543208431,"shasum":"3fe1909bb0f8133f40d50d45abc3e4ba3856413b"},{"_id":"public/tags/Scrapy/index.html","modified":1442543208476,"shasum":"b36f305e60a89302cd845e0918673df6cfba1b28"},{"_id":"public/tags/Swift/index.html","modified":1442543208514,"shasum":"02aeaca95de9bcd99c4c1b480eebe6fd1b3dea9d"},{"_id":"public/tags/WWDC/index.html","modified":1442543208548,"shasum":"347d68a96fa0d156bef4e3ed778e865d0e7ea78f"},{"_id":"public/tags/Apple-Watch/index.html","modified":1442543208577,"shasum":"118661ffcba8c10621acf747771b1df33828b9c3"},{"_id":"public/sitemap.xml","modified":1442543208581,"shasum":"f69a60145498daa4236bcc397abe4f69ec6322d6"},{"_id":"themes/next/source/favicon.ico","shasum":"2b4725543785d623f5cd78ff650f97c4d3f858c7","modified":1442543613000},{"_id":"public/favicon.ico","modified":1442543971788,"shasum":"2b4725543785d623f5cd78ff650f97c4d3f858c7"}],"Category":[{"name":"jekyll update","_id":"ciep0z8lq00013js6666js4pf"}],"Data":[],"Page":[{"title":"tags","date":"2015-09-15T06:27:43.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2015-09-15 14:27:43\ntype: \"tags\"\ncomments: false\n---\n","updated":"2015-09-15T09:50:01.000Z","path":"tags/index.html","layout":"page","_id":"ciep0z8n100033js60xg9pafl"},{"title":"about","date":"2015-09-15T06:30:50.000Z","_content":"","source":"about/index.md","raw":"title: about\ndate: 2015-09-15 14:30:50\n---\n","updated":"2015-09-15T09:50:01.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciep0z8nv00043js6hzmvec38"}],"Post":[{"layout":"post","title":"Mac OS X 中为Apache开启ssl","date":"2015-06-23T14:19:36.000Z","_content":"\n最近由于工作需要，需要给Mac本地的Apache配置ssl环境，折腾了一下午，终于解决了，把过程记录下来，留给有需要的人。\n\n- 生成ssl证书\n\n1. 生成主机密匙 （'ssl'这个文件夹可以随意起名字，只要在后面的设置中保持一致即可）\n\n\n\t\tsudo mkdir /private/etc/apache2/ssl\n\t\tcd /private/etc/apache2/ssl\n\t\tsudo ssh-keygen -f server.key\n\n\n2. 生成证书请求文件（这个过程感觉跟iOS生成开发证书类似）\n\n\t\tsudo openssl req -new -key server.key -out request.csr\n    \t// 这个过程中会让输入一些证书机构的信息，按照提示或者留空就行\n   \n    \n3. 使用server.key 和 request.csr 生成ssl证书\n\n\t\tsudo openssl x509 -req -days 365 -in request.csr -signkey server.key -out server.crt\n\n- 配置Apache\n\n1. 编辑httpd.conf文件\n\n    sudo vi /private/etc/apache2/httpd.conf\n\n    \n去掉下面四行前面的 '#'\n\n``` php\nLoadModule ssl_module libexec/apache2/mod_ssl.so\nLoadModule socache_shmcb_module libexec/apache2/mod_socache_shmcb.so\nInclude /private/etc/apache2/extra/httpd-ssl.conf\nInclude /private/etc/apache2/extra/httpd-vhosts.conf\n``` \n\n2. 编辑httpd-ssl.conf文件\n\n    sudo vi /private/etc/apache2/extra/httpd-ssl.conf\n\n将以下两行：\n\n    SSLCertificateFile \"/private/etc/apache2/server.crt\"\n\n    SSLCertificateKeyFile \"/private/etc/apache2/server.key\"\n\n    \n分别修改为：（需要注意的是ssl文件夹为第1步创建的文件夹）\n\n    SSLCertificateFile \"/private/etc/apache2/ssl/server.crt\"\n\n    SSLCertificateKeyFile \"/private/etc/apache2/ssl/server.key\"\n\n需要注意的是该文件68行的代码会在Apache运行的时候报错\n\n    SSLMutex  \"file:/private/var/run/ssl_mutex\"\n\n查找网上的解决方案是将这行代码注释，不知道会不会带来安全隐患，烦请知道的同学告知。\n\n3. 编辑httpd-vhosts.conf文件\n\n在文件末尾添加：\n\n    <VirtualHost *:443> \n    SSLEngine on\n    SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL\n    SSLCertificateFile /private/etc/apache2/ssl/server.crt \n    SSLCertificateKeyFile /private/etc/apache2/ssl/server.key\n    ServerName localhost\n    // copy your DocumentRoot setting in httpd.conf to here\n    DocumentRoot \"/Users/$yourName/Sites\"\n    </VirtualHost>\n\n这时需要注意，httpd-vhosts.conf文件里面有个默认的 <VirtualHost *:80>标签， 不做修改的话，访问localhost会报错:The Request / Not Found\n\n这是因为<VirtualHost *:80>里的设置会覆盖以前单站点模式下的设置, 所以要把该文件里的一些设置同步过来, 我把他修改成这样:\n\n\n\t<VirtualHost *:80>\n\tServerAdmin xxx@example.com\n\t// copy your DocumentRoot setting in httpd.conf to here\n\tDocumentRoot \"/Users/$yourName/Sites\"\n\tServerName localhost\n\tErrorLog \"/private/var/log/apache2/error_log\"\n\tCustomLog \"/private/var/log/apache2/access_log\" common\n\t</VirtualHost> \n\n进行到这里就配置完了，重启Apache，访问https://localhost试试吧！\n\n    sudo apachectl configtest\n    sudo apachectl restart\n\n- 后记\n\n其实最近折腾这个主要是为了练习iOS应用框架中使用SSL加密以及实现iOS自动打包至服务器使用itms-service协议自动安装至手机的过程，然而由于服务器缺少https环境，本地https又缺少SA认证，尚未实现，权当给自己挖个坑，钻研钻研吧！\n\n参考：\n\n[http://www.cnblogs.com/y500/p/3596473.html](http://www.cnblogs.com/y500/p/3596473.html)\n\n[http://stackoverflow.com/questions/13969272/apache-sslmutex-issue](http://stackoverflow.com/questions/13969272/apache-sslmutex-issue)\n\n\n\n","source":"_posts/2015-6-23-Mac-OS-ssl.md","raw":"---\nlayout: post\ntitle:  \"Mac OS X 中为Apache开启ssl\"\ndate:   2015-06-23 22:19:36\ncategories: jekyll update\n---\n\n最近由于工作需要，需要给Mac本地的Apache配置ssl环境，折腾了一下午，终于解决了，把过程记录下来，留给有需要的人。\n\n- 生成ssl证书\n\n1. 生成主机密匙 （'ssl'这个文件夹可以随意起名字，只要在后面的设置中保持一致即可）\n\n\n\t\tsudo mkdir /private/etc/apache2/ssl\n\t\tcd /private/etc/apache2/ssl\n\t\tsudo ssh-keygen -f server.key\n\n\n2. 生成证书请求文件（这个过程感觉跟iOS生成开发证书类似）\n\n\t\tsudo openssl req -new -key server.key -out request.csr\n    \t// 这个过程中会让输入一些证书机构的信息，按照提示或者留空就行\n   \n    \n3. 使用server.key 和 request.csr 生成ssl证书\n\n\t\tsudo openssl x509 -req -days 365 -in request.csr -signkey server.key -out server.crt\n\n- 配置Apache\n\n1. 编辑httpd.conf文件\n\n    sudo vi /private/etc/apache2/httpd.conf\n\n    \n去掉下面四行前面的 '#'\n\n``` php\nLoadModule ssl_module libexec/apache2/mod_ssl.so\nLoadModule socache_shmcb_module libexec/apache2/mod_socache_shmcb.so\nInclude /private/etc/apache2/extra/httpd-ssl.conf\nInclude /private/etc/apache2/extra/httpd-vhosts.conf\n``` \n\n2. 编辑httpd-ssl.conf文件\n\n    sudo vi /private/etc/apache2/extra/httpd-ssl.conf\n\n将以下两行：\n\n    SSLCertificateFile \"/private/etc/apache2/server.crt\"\n\n    SSLCertificateKeyFile \"/private/etc/apache2/server.key\"\n\n    \n分别修改为：（需要注意的是ssl文件夹为第1步创建的文件夹）\n\n    SSLCertificateFile \"/private/etc/apache2/ssl/server.crt\"\n\n    SSLCertificateKeyFile \"/private/etc/apache2/ssl/server.key\"\n\n需要注意的是该文件68行的代码会在Apache运行的时候报错\n\n    SSLMutex  \"file:/private/var/run/ssl_mutex\"\n\n查找网上的解决方案是将这行代码注释，不知道会不会带来安全隐患，烦请知道的同学告知。\n\n3. 编辑httpd-vhosts.conf文件\n\n在文件末尾添加：\n\n    <VirtualHost *:443> \n    SSLEngine on\n    SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL\n    SSLCertificateFile /private/etc/apache2/ssl/server.crt \n    SSLCertificateKeyFile /private/etc/apache2/ssl/server.key\n    ServerName localhost\n    // copy your DocumentRoot setting in httpd.conf to here\n    DocumentRoot \"/Users/$yourName/Sites\"\n    </VirtualHost>\n\n这时需要注意，httpd-vhosts.conf文件里面有个默认的 <VirtualHost *:80>标签， 不做修改的话，访问localhost会报错:The Request / Not Found\n\n这是因为<VirtualHost *:80>里的设置会覆盖以前单站点模式下的设置, 所以要把该文件里的一些设置同步过来, 我把他修改成这样:\n\n\n\t<VirtualHost *:80>\n\tServerAdmin xxx@example.com\n\t// copy your DocumentRoot setting in httpd.conf to here\n\tDocumentRoot \"/Users/$yourName/Sites\"\n\tServerName localhost\n\tErrorLog \"/private/var/log/apache2/error_log\"\n\tCustomLog \"/private/var/log/apache2/access_log\" common\n\t</VirtualHost> \n\n进行到这里就配置完了，重启Apache，访问https://localhost试试吧！\n\n    sudo apachectl configtest\n    sudo apachectl restart\n\n- 后记\n\n其实最近折腾这个主要是为了练习iOS应用框架中使用SSL加密以及实现iOS自动打包至服务器使用itms-service协议自动安装至手机的过程，然而由于服务器缺少https环境，本地https又缺少SA认证，尚未实现，权当给自己挖个坑，钻研钻研吧！\n\n参考：\n\n[http://www.cnblogs.com/y500/p/3596473.html](http://www.cnblogs.com/y500/p/3596473.html)\n\n[http://stackoverflow.com/questions/13969272/apache-sslmutex-issue](http://stackoverflow.com/questions/13969272/apache-sslmutex-issue)\n\n\n\n","slug":"2015-6-23-Mac-OS-ssl","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8ll00003js6u8ssp8c4"},{"layout":"post","title":"Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇","date":"2015-09-09T07:30:00.000Z","_content":"\n##系列目录\n\n你可以从这个地方做一个快速跳转。\n\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift1.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（二）之爬虫篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift2.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（三）之数据库MySQL篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（七）之Swift篇]()\n\n## 温故知新\n\n在前面的系列中，我们编写了爬虫，并且设置爬虫在每天的固定时间运行，对于频繁的爬虫请求，设置了随机的`User-Agent`，到现在为止，我们的数据库中应该已经存储了大量的数据，如图：\n\n![](/assets/2015/fullstack_api01.png)\n\n此次系列我们要编写`PHP`程序，提供客户端跟后台通信的接口。\n\n## 准备工作\n\n开始之前，确保机器上已经装有Apache、MySQL和PHP。好在Mac上已经自带Apache和PHP了，之前的系列中我们也在机器上安装了MySQL。要启用Apache，在终端执行下面的命令：\n\n\tsudo apachectl start\n\t\nMac上的Apache默认WWW目录是在`/Library/WebServer/Documents`，如果有需要，可以把默认WWW目录改成其他目录。\n\nApache默认是没有启用PHP支持的，要开启的话，应该这样：\n\t\n\tsudo vi /etc/apache2/httpd.conf\n\t// 找到下面这行，将前面的#去掉\n\t# LoadModule php5_module libexec/apache2/libphp5.so\n\t// 重启Apache\n\tsudo apachectl start\n\n## 创建PHP工程\n\n环境搭好以后，我们需要测试一下是否服务器可以正常工作。在WWW目录下新建一个名为`test.php`的文件，写入下面的测试代码。然后通过在浏览器中访问`http://localhost//test.php`可以在窗口中看到\"Hello, World\"说明正常工作了。\n\n\t// test.php\n\t<?php\n\t\techo \"Hello, World\";\n\t?>\n\n## 通过PHP连接MySQL\n\n现在需要一个PHP类来连接MySQL，这个类的主要目的就是打开或者关闭一个连接到数据库的连接。所以创建两个文件：config.db.php 和 database.class.php.\n\n- config.db.php : 配置数据库连接的用户名、密码、端口等。\n- database.class.php : 创建一个到数据库的连接\n\n以下为这两个文件的代码\n\n__config.db.php__\n\n``` php\n\nconfig.db.php\n<?php\n \n/*\n * All database connection variables\n */\n \ndefine('DB_USERNAME', \"root\"); // User\ndefine('DB_PASSWORD', \"\"); // Passwd\ndefine('DB_DATABASE', \"dbmeizi\"); // Database\ndefine('DB_HOST', \"127.0.0.1\"); // Server\ndefine('DB_PORT', 3307); // Port\n?>\n```\n\n__database.class.php__\n\n``` php\ndatabase.class.php\n<?php\n \n/**\n * A class file to connect to database\n */\nclass DbConnect {\n \n    // constructor\n    function __construct() {\n    }\n \n    // destructor\n    function __destruct() {\n    }\n \n    /**\n     * Function to connect with database\n     */\n    function connect() {\n        // import database connection variables\n        require_once __DIR__ . '/config.db.php';\n \n        // Connecting to mysql database\n        $this->conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_DATABASE, DB_PORT);\n \n        // Check for database connection error\n        if (mysqli_connect_errno()) {\n            echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n        }\n        $this->conn->query(\"SET NAMES utf8\"); \n        // returing connection resource\n        return $this->conn;\n    }\n}\n \n?>\n```\n\n说明：在接下来的工程中，当我们需要使用数据库连接的时候，可以使用下面的代码：\n\n\t$db = new DbConnect(); \n\t$conn = $db->connect();\n\t\n\t\n## 通过PHP进行基本的MySQL CRUD操作\n\n接下来进行通过PHP操作数据库，CRUD代表Create, Read, Update, Delete \n\n### 1.Reading All Rows from MySQL\n\n要读取数据库中我们抓取的meizi的列表，创建一个文件 __girllist.php__ ，写入下面的代码\n\n``` php\n<?php\n \n/*\n * get girl list \n */\n \n$response = array();\n \nrequire_once __DIR__ . '/include/database.class.php'; \n \n// connecting to db\n$db = new DbConnect();\n$conn = $db->connect();\n\n\n// 默认页数\n$size = 10;\n$page = $_GET['p'];\nif ($page == '' || !is_numeric($page)) {\n    $page = 0;\n}\n$start = $size * intval($page);\n \n// get girl list from table\n\n// new girl\n$sql = \"SELECT * FROM meizi WHERE 1 = 1 ORDER BY id DESC LIMIT {$start}, {$size}\";\n\n$result = $conn->query($sql)->fetch_all(MYSQLI_ASSOC);\nif (!empty($result)) {\n    // check for empty result\n    // success\n    $response[\"code\"] = 1;\n    $response[\"msg\"] = \"success\";\n    $response[\"list\"] = $result;\n    echo json_encode($response);\n} else {\n    // no girl found\n    $response[\"code\"] = 0;\n    $response[\"msg\"] = \"No girl found\";\n    $response[\"list\"] = array();\n    echo json_encode($response);\n\n}\n    \n?>\n```\n\n在浏览器访问这个文件，成功获取列表的时候：\n\t\n\t{\n\t\tcode: 1,\n\t\tmsg: \"success\",\n\t\tlist: [\n\t\t\t{\n\t\t\t\tid: \"160\",\n\t\t\t\ttitle: \"睡不着 秒回么？\",\n\t\t\t\timgsrc: \"http://ww2.sinaimg.cn/bmiddle/0060lm7Tgw1evush3zicwj30dw0iu41b.jpg\",\n\t\t\t\ttopic_link: \"http://www.dbmeinv.com/dbgroup/417098\",\n\t\t\t\tstar_count: \"0\",\n\t\t\t\tupdate_time: \"1441697041\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: \"159\",\n\t\t\t\ttitle: \"【晒】\",\n\t\t\t\timgsrc: \"http://ww2.sinaimg.cn/bmiddle/0060lm7Tgw1evusfx74ipj30dw0iitbl.jpg\",\n\t\t\t\ttopic_link: \"http://www.dbmeinv.com/dbgroup/417122\",\n\t\t\t\tstar_count: \"0\",\n\t\t\t\tupdate_time: \"1441697041\"\n\t\t\t}\n\t\t]\n\t}\n\n### 2.Updating a Row in MySQL\n\n之前的系列中提到过，用户可以给某个meizi点赞，实现这个功能创建一个文件 __likegirl.php__ ，写入下面的代码\n\n``` php\n<?php\n \n/*\n * like a girl \n */\n \n// array for JSON response\n$response = array();\n \n// include db connect class\nrequire_once __DIR__ . '/include/database.class.php'; \n \n// connecting to db\n$db = new DbConnect();\n$conn = $db->connect();\n \n\n// id of the girl\n$girlid = $_GET['girlid'];\nif ($girlid == '' || !is_numeric($girlid)) {\n    $response[\"code\"] = 0;\n    $response[\"msg\"] = \"oops, you need to tell me the girl's id\";\n     exit(json_encode($response));\n}\n// let the girl's startcount + 1\n$result = $conn->query(\"UPDATE meizi set star_count = star_count + 1 WHERE id = {$girlid}\");\n\nif ($result) {\n    // check for empty result\n    // success\n    $response[\"code\"] = 1;\n    $response[\"msg\"] = \"success\";\n    echo json_encode($response);\n} else {\n    // no girl found\n    $response[\"code\"] = 0;\n    $response[\"msg\"] = \"failed\";\n    echo json_encode($response);\n}\n\n?>\n```\n\n在浏览器中访问这个文件，注意要拼接上`girlid`参数和对应的值。成功点赞的时候：\n\n\t{\n\t\tcode: 1,\n\t\tmsg: \"success\"\n\t}\n\t\n至此，我们已经实现了跟客户端通信的一套基本框架，其他功能都可以在这个基础上拓展。\n\n## 最后\n\n按照惯例，放上源码地址：\n\n\n\n\n","source":"_posts/2015-9-9-fullstack-of-Scrapy+MySQL+PHP+Swift5.md","raw":"---\nlayout: post\ntitle:  \"Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇\"\ndate:   2015-09-09 15:30:00\ntags:\n  - Linux\n  - Scrapy\n  - Swift\n---\n\n##系列目录\n\n你可以从这个地方做一个快速跳转。\n\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift1.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（二）之爬虫篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift2.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（三）之数据库MySQL篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（七）之Swift篇]()\n\n## 温故知新\n\n在前面的系列中，我们编写了爬虫，并且设置爬虫在每天的固定时间运行，对于频繁的爬虫请求，设置了随机的`User-Agent`，到现在为止，我们的数据库中应该已经存储了大量的数据，如图：\n\n![](/assets/2015/fullstack_api01.png)\n\n此次系列我们要编写`PHP`程序，提供客户端跟后台通信的接口。\n\n## 准备工作\n\n开始之前，确保机器上已经装有Apache、MySQL和PHP。好在Mac上已经自带Apache和PHP了，之前的系列中我们也在机器上安装了MySQL。要启用Apache，在终端执行下面的命令：\n\n\tsudo apachectl start\n\t\nMac上的Apache默认WWW目录是在`/Library/WebServer/Documents`，如果有需要，可以把默认WWW目录改成其他目录。\n\nApache默认是没有启用PHP支持的，要开启的话，应该这样：\n\t\n\tsudo vi /etc/apache2/httpd.conf\n\t// 找到下面这行，将前面的#去掉\n\t# LoadModule php5_module libexec/apache2/libphp5.so\n\t// 重启Apache\n\tsudo apachectl start\n\n## 创建PHP工程\n\n环境搭好以后，我们需要测试一下是否服务器可以正常工作。在WWW目录下新建一个名为`test.php`的文件，写入下面的测试代码。然后通过在浏览器中访问`http://localhost//test.php`可以在窗口中看到\"Hello, World\"说明正常工作了。\n\n\t// test.php\n\t<?php\n\t\techo \"Hello, World\";\n\t?>\n\n## 通过PHP连接MySQL\n\n现在需要一个PHP类来连接MySQL，这个类的主要目的就是打开或者关闭一个连接到数据库的连接。所以创建两个文件：config.db.php 和 database.class.php.\n\n- config.db.php : 配置数据库连接的用户名、密码、端口等。\n- database.class.php : 创建一个到数据库的连接\n\n以下为这两个文件的代码\n\n__config.db.php__\n\n``` php\n\nconfig.db.php\n<?php\n \n/*\n * All database connection variables\n */\n \ndefine('DB_USERNAME', \"root\"); // User\ndefine('DB_PASSWORD', \"\"); // Passwd\ndefine('DB_DATABASE', \"dbmeizi\"); // Database\ndefine('DB_HOST', \"127.0.0.1\"); // Server\ndefine('DB_PORT', 3307); // Port\n?>\n```\n\n__database.class.php__\n\n``` php\ndatabase.class.php\n<?php\n \n/**\n * A class file to connect to database\n */\nclass DbConnect {\n \n    // constructor\n    function __construct() {\n    }\n \n    // destructor\n    function __destruct() {\n    }\n \n    /**\n     * Function to connect with database\n     */\n    function connect() {\n        // import database connection variables\n        require_once __DIR__ . '/config.db.php';\n \n        // Connecting to mysql database\n        $this->conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_DATABASE, DB_PORT);\n \n        // Check for database connection error\n        if (mysqli_connect_errno()) {\n            echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n        }\n        $this->conn->query(\"SET NAMES utf8\"); \n        // returing connection resource\n        return $this->conn;\n    }\n}\n \n?>\n```\n\n说明：在接下来的工程中，当我们需要使用数据库连接的时候，可以使用下面的代码：\n\n\t$db = new DbConnect(); \n\t$conn = $db->connect();\n\t\n\t\n## 通过PHP进行基本的MySQL CRUD操作\n\n接下来进行通过PHP操作数据库，CRUD代表Create, Read, Update, Delete \n\n### 1.Reading All Rows from MySQL\n\n要读取数据库中我们抓取的meizi的列表，创建一个文件 __girllist.php__ ，写入下面的代码\n\n``` php\n<?php\n \n/*\n * get girl list \n */\n \n$response = array();\n \nrequire_once __DIR__ . '/include/database.class.php'; \n \n// connecting to db\n$db = new DbConnect();\n$conn = $db->connect();\n\n\n// 默认页数\n$size = 10;\n$page = $_GET['p'];\nif ($page == '' || !is_numeric($page)) {\n    $page = 0;\n}\n$start = $size * intval($page);\n \n// get girl list from table\n\n// new girl\n$sql = \"SELECT * FROM meizi WHERE 1 = 1 ORDER BY id DESC LIMIT {$start}, {$size}\";\n\n$result = $conn->query($sql)->fetch_all(MYSQLI_ASSOC);\nif (!empty($result)) {\n    // check for empty result\n    // success\n    $response[\"code\"] = 1;\n    $response[\"msg\"] = \"success\";\n    $response[\"list\"] = $result;\n    echo json_encode($response);\n} else {\n    // no girl found\n    $response[\"code\"] = 0;\n    $response[\"msg\"] = \"No girl found\";\n    $response[\"list\"] = array();\n    echo json_encode($response);\n\n}\n    \n?>\n```\n\n在浏览器访问这个文件，成功获取列表的时候：\n\t\n\t{\n\t\tcode: 1,\n\t\tmsg: \"success\",\n\t\tlist: [\n\t\t\t{\n\t\t\t\tid: \"160\",\n\t\t\t\ttitle: \"睡不着 秒回么？\",\n\t\t\t\timgsrc: \"http://ww2.sinaimg.cn/bmiddle/0060lm7Tgw1evush3zicwj30dw0iu41b.jpg\",\n\t\t\t\ttopic_link: \"http://www.dbmeinv.com/dbgroup/417098\",\n\t\t\t\tstar_count: \"0\",\n\t\t\t\tupdate_time: \"1441697041\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: \"159\",\n\t\t\t\ttitle: \"【晒】\",\n\t\t\t\timgsrc: \"http://ww2.sinaimg.cn/bmiddle/0060lm7Tgw1evusfx74ipj30dw0iitbl.jpg\",\n\t\t\t\ttopic_link: \"http://www.dbmeinv.com/dbgroup/417122\",\n\t\t\t\tstar_count: \"0\",\n\t\t\t\tupdate_time: \"1441697041\"\n\t\t\t}\n\t\t]\n\t}\n\n### 2.Updating a Row in MySQL\n\n之前的系列中提到过，用户可以给某个meizi点赞，实现这个功能创建一个文件 __likegirl.php__ ，写入下面的代码\n\n``` php\n<?php\n \n/*\n * like a girl \n */\n \n// array for JSON response\n$response = array();\n \n// include db connect class\nrequire_once __DIR__ . '/include/database.class.php'; \n \n// connecting to db\n$db = new DbConnect();\n$conn = $db->connect();\n \n\n// id of the girl\n$girlid = $_GET['girlid'];\nif ($girlid == '' || !is_numeric($girlid)) {\n    $response[\"code\"] = 0;\n    $response[\"msg\"] = \"oops, you need to tell me the girl's id\";\n     exit(json_encode($response));\n}\n// let the girl's startcount + 1\n$result = $conn->query(\"UPDATE meizi set star_count = star_count + 1 WHERE id = {$girlid}\");\n\nif ($result) {\n    // check for empty result\n    // success\n    $response[\"code\"] = 1;\n    $response[\"msg\"] = \"success\";\n    echo json_encode($response);\n} else {\n    // no girl found\n    $response[\"code\"] = 0;\n    $response[\"msg\"] = \"failed\";\n    echo json_encode($response);\n}\n\n?>\n```\n\n在浏览器中访问这个文件，注意要拼接上`girlid`参数和对应的值。成功点赞的时候：\n\n\t{\n\t\tcode: 1,\n\t\tmsg: \"success\"\n\t}\n\t\n至此，我们已经实现了跟客户端通信的一套基本框架，其他功能都可以在这个基础上拓展。\n\n## 最后\n\n按照惯例，放上源码地址：\n\n\n\n\n","slug":"2015-9-9-fullstack-of-Scrapy-MySQL-PHP-Swift5","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8nx00053js6lslxq561"},{"layout":"post","title":"Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇","date":"2015-09-08T03:11:11.000Z","_content":"\n##系列目录\n\n你可以从这个地方做一个快速跳转。\n\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift1.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（二）之爬虫篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift2.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（三）之数据库MySQL篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（七）之Swift篇]()\n\n## 防止爬虫被封\n\n系列（二）中提到过，对于一个网络请求，网站后台可能会检查其`User-Agent`，所以一个防止爬虫可行的做法就是设置请求的`User-Agent`。对于频繁的请求，还要对`User-Agent`做随机变换。\n\n可以通过`Downloader Middleware`来修改爬虫的request和respons。\n\n### 使用下载器中间件(Downloader Middleware)\n\n要激活下载器中间件组件，需要将其加入到`DOWNLOADER_MIDDLEWARES`设置中。 该设置是一个字典(dict)，键为中间件类的路径，值为其中间件的顺序(order)。\n\n\tDOWNLOADER_MIDDLEWARES = {\n    'dbmeizi.middlewares.RandomUserAgent': 1\n\t}\n\n因为要使用随机的`User-Agent`，所以在设置中，顺便加上随机`User-Agent`的配置：\n\t\n\tUSER_AGENTS = [\n    \"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\",\n    \"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12\",\n\t]\n\t\n### 编写下载器中间件\n\n创建一个中间件文件`middlewares.py`.\n\n``` python\n\nimport random\nimport base64\n\nclass RandomUserAgent(object):\n\n    def __init__(self, agents):\n        self.agents = agents\n\n    @classmethod\n    def from_crawler(cls, crawler):\n        return cls(crawler.settings.getlist('USER_AGENTS'))\n\n    def process_request(self, request, spider):\n        request.headers.setdefault('User-Agent', random.choice(self.agents))\n        \n```\n\n\n## 自动运行\n\n为了源源不断获取数据，要每天都运行爬虫抓取数据，显然每次都人为发起爬虫是不切实际的。\n\n在Mac上可以通过`crontab`让爬虫定时自动执行。\n\n\t// 为当前用户新增任务\n\tcrontab -e\n\t// 增加如下记录 注意替换自己的爬虫目录 由于环境变量的原因，scrapy要给出全路径\n\t0 10 * * * cd /Users/herui/Sites/dbmeizi && /usr/local/bin/scrapy crawl dbmeiziSpider\n\t\n如上，添加了一个任务，这个任务会每天早上10：00启动，这个任务要做得就是进入爬虫目录，并启动爬虫。\n\n不过查了下，Mac上目前好像不太推荐用`crontab`了，推荐使用`launchd`. 有机会可以了解下。\n\n\n## 最后\n\n按照惯例，放上源码地址：\n\n\n\n\n","source":"_posts/2015-9-8-fullstack-of-Scrapy+MySQL+PHP+Swift4.md","raw":"---\nlayout: post\ntitle:  \"Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇\"\ndate:   2015-09-08 11:11:11\ntags:\n  - Linux\n  - Scrapy\n  - Swift\n---\n\n##系列目录\n\n你可以从这个地方做一个快速跳转。\n\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift1.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（二）之爬虫篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift2.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（三）之数据库MySQL篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（七）之Swift篇]()\n\n## 防止爬虫被封\n\n系列（二）中提到过，对于一个网络请求，网站后台可能会检查其`User-Agent`，所以一个防止爬虫可行的做法就是设置请求的`User-Agent`。对于频繁的请求，还要对`User-Agent`做随机变换。\n\n可以通过`Downloader Middleware`来修改爬虫的request和respons。\n\n### 使用下载器中间件(Downloader Middleware)\n\n要激活下载器中间件组件，需要将其加入到`DOWNLOADER_MIDDLEWARES`设置中。 该设置是一个字典(dict)，键为中间件类的路径，值为其中间件的顺序(order)。\n\n\tDOWNLOADER_MIDDLEWARES = {\n    'dbmeizi.middlewares.RandomUserAgent': 1\n\t}\n\n因为要使用随机的`User-Agent`，所以在设置中，顺便加上随机`User-Agent`的配置：\n\t\n\tUSER_AGENTS = [\n    \"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\",\n    \"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12\",\n\t]\n\t\n### 编写下载器中间件\n\n创建一个中间件文件`middlewares.py`.\n\n``` python\n\nimport random\nimport base64\n\nclass RandomUserAgent(object):\n\n    def __init__(self, agents):\n        self.agents = agents\n\n    @classmethod\n    def from_crawler(cls, crawler):\n        return cls(crawler.settings.getlist('USER_AGENTS'))\n\n    def process_request(self, request, spider):\n        request.headers.setdefault('User-Agent', random.choice(self.agents))\n        \n```\n\n\n## 自动运行\n\n为了源源不断获取数据，要每天都运行爬虫抓取数据，显然每次都人为发起爬虫是不切实际的。\n\n在Mac上可以通过`crontab`让爬虫定时自动执行。\n\n\t// 为当前用户新增任务\n\tcrontab -e\n\t// 增加如下记录 注意替换自己的爬虫目录 由于环境变量的原因，scrapy要给出全路径\n\t0 10 * * * cd /Users/herui/Sites/dbmeizi && /usr/local/bin/scrapy crawl dbmeiziSpider\n\t\n如上，添加了一个任务，这个任务会每天早上10：00启动，这个任务要做得就是进入爬虫目录，并启动爬虫。\n\n不过查了下，Mac上目前好像不太推荐用`crontab`了，推荐使用`launchd`. 有机会可以了解下。\n\n\n## 最后\n\n按照惯例，放上源码地址：\n\n\n\n\n","slug":"2015-9-8-fullstack-of-Scrapy-MySQL-PHP-Swift4","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8o1000c3js66ydm9j7h"},{"layout":"post","title":"Scrapy+MySQL+PHP+Swift开发攻略系列（三）数据库MySQL篇","date":"2015-09-03T01:09:09.000Z","_content":"\n##系列目录\n\n你可以从这个地方做一个快速跳转。\n\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift1.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（二）之爬虫篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift2.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（三）之数据库MySQL篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（七）之Swift篇]()\n\n## 温故而知新\n\n上个系列中，`spider`已经爬取到我们感兴趣的`item`了。这个系列我们主要实现怎么把抓取到的`item`保存到`MySQL`数据库中。\n\n## 安装MySQLdb\n\n安装`MySQLdb`从这个[网站](https://pypi.python.org/pypi/MySQL-python/1.2.5#downloads)采用源码安装。\n\n安装过程中这些情况你可能需要参考：\n\n- 修改`site.cfg`这个文件：\n\n\t\t// 将下面这行代码的注释打开，并将后面的路径修改成本地mysql路径\n\t\tmysql_config.path = \"/usr/local/mysql/bin/mysql_config\"\n\t\t\n- 安装完成后`import MySQLdb`报错提示：`Library not loaded: libmysqlclient.18.dylib\t`：\n\n\t\t// 这种情况需要把mysql的该动态库链接到用户库目录中去\n\t\tsudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib\n\n## 配置MySQL\n\n在`settings.py`配置文件中加入数据库的配置：\n\n\t# start MySQL database configure setting\n\tMYSQL_HOST = 'localhost'\n\tMYSQL_DBNAME = 'dbmeizi'\n\tMYSQL_USER = 'root'\n\tMYSQL_PASSWD = 'hali'\n\tMYSQL_PORT = 3306\n\t# end of MySQL database configure setting\n\n需要注意检查端口要跟实际的数据库服务的端口相一致。\n\n通过`phpMyAdmin`连接数据库创建一个`dbmeizi`数据库，一个`meizi`表，用来保存爬虫数据：\n\t\n\t// 创建数据库\n\tcreate database dbmeizi;\n\t// 创建表\n\tdrop table if exists `meizi`;\n\tcreate table `meizi` (\n\t`id` int(11) unsigned not null auto_increment comment 'id',\n\t`title` varchar(100) not null comment '标题',\n\t`imgsrc` varchar(200) not null comment '图片链接',\n\t`topic_link` varchar(100) not null comment '主题链接',\n\t`star_count` int(11)  not null  comment '点赞数',\n\t`update_time` int(11) not null comment '状态更新时间',\n\tprimary key (`id`)\n\t) engine = innodb default charset = utf8 comment = '豆瓣妹子表';\n\n## Why use Item Pipeline\n\n当得到`item`的时候，我们需要验证`item`中的某些字段是否合法，是否存在重复的`item`，然后才将合格的`item`保存到数据库。\n\n这就是`item pipeline`的典型使用场景。\n\n当`item`在`Spider`中被收集之后，将会被传递到`item pipeline`，每个`item pipeline`组件是实现了简单方法的Python类。他们接收到Item并通过它执行上面提到的典型行为。\n\n## 编写我们的 Item Pipeline\n\n每个`item pipeline`组件是一个独立的Python类，必须实现以下方法:\n\n\tprocess_item(self, item, spider)\n\t每个item pipeline组件都需要调用该方法，这个方法必须返回一个 Item (或任何继承类)对象， 或是抛出 DropItem 异常，被丢弃的item将不会被之后的pipeline组件所处理。\n\n\t参数:\t\n\titem (Item 对象) – 被爬取的item\n\tspider (Spider 对象) – 爬取该item的spider\n\n\n打开`pipelines.py`，这个文件应该是这个样子：\n\n``` python\n\nimport scrapy\nimport MySQLdb\nimport MySQLdb.cursors\nfrom twisted.enterprise import adbapi\n\nclass DbmeiziPipeline(object):\n    def __init__(self, dbpool):\n\t   self.dbpool = dbpool\n\n    @classmethod\n    def from_settings(cls, settings):\n\t   dbargs = dict(\n\t\t  host = settings['MYSQL_HOST'],\n\t\t  db = settings['MYSQL_DBNAME'],\n\t\t  port = settings['MYSQL_PORT'],\n\t\t  user = settings['MYSQL_USER'],\n\t\t  passwd = settings['MYSQL_PASSWD'],\n\t\t  charset = 'utf8',\n\t\t  cursorclass = MySQLdb.cursors.DictCursor,\n\t\t  use_unicode = True,\n\t\t)\n\t   dbpool = adbapi.ConnectionPool('MySQLdb', **dbargs)\n\t   return cls(dbpool)\n\n    #pipeline默认调用\n    def process_item(self, item, spider):\n        d = self.dbpool.runInteraction(self._do_upinsert, item, spider)  \n    \treturn item\n    #将每行更新或写入数据库中\n    def _do_upinsert(self, conn, item, spider):                 \n\n    \tvalid = True\n    \tfor data in item:\n    \t\tif not data:\n    \t\t\tvalid = False\n    \t\t\t# raise DropItem(\"Missing {0}!\".format(data))\n    \t\t\t# print \"Missing data\"\n        if valid:\n            result = conn.execute(\"\"\"\n                insert into meizi(title, imgsrc, topic_link, star_count, update_time) \n                values(%s, %s, %s, %s, %s)\n                \"\"\", (item['title'], item['imgsrc'], item['topic_link'], item['star_count'], item['update_time']))\n            if result:\n                print \"added a girl into db\"\n            else:\n                print \"failed insert into meizi\"\n\n```\n\n`from_settings`这个方法中我们创建了数据库连接，`process_item `方法里面将每一个item存入数据库。主要是常用数据库的操作，不细说了。\n\n\n## 启用一个Item Pipeline组件\n\n为了启用一个`Item Pipeline`组件，必须将它的类添加到`ITEM_PIPELINES`配置，具体就是到`setting.py`这个文件里面加上这么一行：\n\t\n\tITEM_PIPELINES = ['dbmeizi.pipelines. DbmeiziPipeline',] \n\n是指定爬虫爬取后通过哪个管道输出内容。\n\n## 运行爬虫\n到现在为止，这个爬虫就可以将数据保存到数据库了。在工程的根目录下执行如下命令：\n\n\tscrapy crawl dbmeiziSpider\n\n\n\n大功告成。\n\n## 最后\n\n按照惯例，放上源码地址：\n\n\n\n\n","source":"_posts/2015-9-3-fullstack-of-Scrapy+MySQL+PHP+Swift3.md","raw":"---\nlayout: post\ntitle:  \"Scrapy+MySQL+PHP+Swift开发攻略系列（三）数据库MySQL篇\"\ndate:   2015-09-03 09:09:09\ntags:\n  - Linux\n  - Scrapy\n  - Swift\n---\n\n##系列目录\n\n你可以从这个地方做一个快速跳转。\n\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift1.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（二）之爬虫篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift2.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（三）之数据库MySQL篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（七）之Swift篇]()\n\n## 温故而知新\n\n上个系列中，`spider`已经爬取到我们感兴趣的`item`了。这个系列我们主要实现怎么把抓取到的`item`保存到`MySQL`数据库中。\n\n## 安装MySQLdb\n\n安装`MySQLdb`从这个[网站](https://pypi.python.org/pypi/MySQL-python/1.2.5#downloads)采用源码安装。\n\n安装过程中这些情况你可能需要参考：\n\n- 修改`site.cfg`这个文件：\n\n\t\t// 将下面这行代码的注释打开，并将后面的路径修改成本地mysql路径\n\t\tmysql_config.path = \"/usr/local/mysql/bin/mysql_config\"\n\t\t\n- 安装完成后`import MySQLdb`报错提示：`Library not loaded: libmysqlclient.18.dylib\t`：\n\n\t\t// 这种情况需要把mysql的该动态库链接到用户库目录中去\n\t\tsudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib\n\n## 配置MySQL\n\n在`settings.py`配置文件中加入数据库的配置：\n\n\t# start MySQL database configure setting\n\tMYSQL_HOST = 'localhost'\n\tMYSQL_DBNAME = 'dbmeizi'\n\tMYSQL_USER = 'root'\n\tMYSQL_PASSWD = 'hali'\n\tMYSQL_PORT = 3306\n\t# end of MySQL database configure setting\n\n需要注意检查端口要跟实际的数据库服务的端口相一致。\n\n通过`phpMyAdmin`连接数据库创建一个`dbmeizi`数据库，一个`meizi`表，用来保存爬虫数据：\n\t\n\t// 创建数据库\n\tcreate database dbmeizi;\n\t// 创建表\n\tdrop table if exists `meizi`;\n\tcreate table `meizi` (\n\t`id` int(11) unsigned not null auto_increment comment 'id',\n\t`title` varchar(100) not null comment '标题',\n\t`imgsrc` varchar(200) not null comment '图片链接',\n\t`topic_link` varchar(100) not null comment '主题链接',\n\t`star_count` int(11)  not null  comment '点赞数',\n\t`update_time` int(11) not null comment '状态更新时间',\n\tprimary key (`id`)\n\t) engine = innodb default charset = utf8 comment = '豆瓣妹子表';\n\n## Why use Item Pipeline\n\n当得到`item`的时候，我们需要验证`item`中的某些字段是否合法，是否存在重复的`item`，然后才将合格的`item`保存到数据库。\n\n这就是`item pipeline`的典型使用场景。\n\n当`item`在`Spider`中被收集之后，将会被传递到`item pipeline`，每个`item pipeline`组件是实现了简单方法的Python类。他们接收到Item并通过它执行上面提到的典型行为。\n\n## 编写我们的 Item Pipeline\n\n每个`item pipeline`组件是一个独立的Python类，必须实现以下方法:\n\n\tprocess_item(self, item, spider)\n\t每个item pipeline组件都需要调用该方法，这个方法必须返回一个 Item (或任何继承类)对象， 或是抛出 DropItem 异常，被丢弃的item将不会被之后的pipeline组件所处理。\n\n\t参数:\t\n\titem (Item 对象) – 被爬取的item\n\tspider (Spider 对象) – 爬取该item的spider\n\n\n打开`pipelines.py`，这个文件应该是这个样子：\n\n``` python\n\nimport scrapy\nimport MySQLdb\nimport MySQLdb.cursors\nfrom twisted.enterprise import adbapi\n\nclass DbmeiziPipeline(object):\n    def __init__(self, dbpool):\n\t   self.dbpool = dbpool\n\n    @classmethod\n    def from_settings(cls, settings):\n\t   dbargs = dict(\n\t\t  host = settings['MYSQL_HOST'],\n\t\t  db = settings['MYSQL_DBNAME'],\n\t\t  port = settings['MYSQL_PORT'],\n\t\t  user = settings['MYSQL_USER'],\n\t\t  passwd = settings['MYSQL_PASSWD'],\n\t\t  charset = 'utf8',\n\t\t  cursorclass = MySQLdb.cursors.DictCursor,\n\t\t  use_unicode = True,\n\t\t)\n\t   dbpool = adbapi.ConnectionPool('MySQLdb', **dbargs)\n\t   return cls(dbpool)\n\n    #pipeline默认调用\n    def process_item(self, item, spider):\n        d = self.dbpool.runInteraction(self._do_upinsert, item, spider)  \n    \treturn item\n    #将每行更新或写入数据库中\n    def _do_upinsert(self, conn, item, spider):                 \n\n    \tvalid = True\n    \tfor data in item:\n    \t\tif not data:\n    \t\t\tvalid = False\n    \t\t\t# raise DropItem(\"Missing {0}!\".format(data))\n    \t\t\t# print \"Missing data\"\n        if valid:\n            result = conn.execute(\"\"\"\n                insert into meizi(title, imgsrc, topic_link, star_count, update_time) \n                values(%s, %s, %s, %s, %s)\n                \"\"\", (item['title'], item['imgsrc'], item['topic_link'], item['star_count'], item['update_time']))\n            if result:\n                print \"added a girl into db\"\n            else:\n                print \"failed insert into meizi\"\n\n```\n\n`from_settings`这个方法中我们创建了数据库连接，`process_item `方法里面将每一个item存入数据库。主要是常用数据库的操作，不细说了。\n\n\n## 启用一个Item Pipeline组件\n\n为了启用一个`Item Pipeline`组件，必须将它的类添加到`ITEM_PIPELINES`配置，具体就是到`setting.py`这个文件里面加上这么一行：\n\t\n\tITEM_PIPELINES = ['dbmeizi.pipelines. DbmeiziPipeline',] \n\n是指定爬虫爬取后通过哪个管道输出内容。\n\n## 运行爬虫\n到现在为止，这个爬虫就可以将数据保存到数据库了。在工程的根目录下执行如下命令：\n\n\tscrapy crawl dbmeiziSpider\n\n\n\n大功告成。\n\n## 最后\n\n按照惯例，放上源码地址：\n\n\n\n\n","slug":"2015-9-3-fullstack-of-Scrapy-MySQL-PHP-Swift3","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8o3000g3js6db3iyjsb"},{"layout":"post","title":"Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇","date":"2015-09-10T06:30:00.000Z","_content":"\n##系列目录\n\n你可以从这个地方做一个快速跳转。\n\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift1.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（二）之爬虫篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift2.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（三）之数据库MySQL篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（七）之Swift篇]()\n\n## 温故而知新\n\n上个系列中，我们编写了客户端跟服务器数据库沟通的接口文件。\n\n考虑到我们将会编写iOS客户端程序，或许将来还会有Android程序和Web App，那么构建`REST API`来进行App和服务器的沟通将是一个很好的选择。\n\n本次系列将会构建一个简单的`REST API`.\n\n## 准备工作\n\n1. 关于`REST API`，参考这个[链接](http://www.ruanyifeng.com/blog/2014/05/restful_api.html)了解\n2. HTTP Methods：设计良好的 RESTful API 应该支持主流的请求方法，并且依据具体的操作类型在选择使用哪中方法的时候应该取决于操作类型\n\n\t- __GET__ ： 拉取一条资源\n\t- __POST__ ：新建一条资源\n\t- __PUT__ ：更新一条资源 \n\t- __DELETE__ ：删除一条资源\n\n3. Slim PHP Micro Framework\n\n\t为了站在巨人的肩膀上，我们选择利用`Slim`这个框架来进行开发。 `Slim`作为一个支持REST API的开发框架，轻量且容易上手，可以从这个[链接](https://github.com/codeguy/Slim)下载。\n\n4. 安装谷歌浏览器插件`Advanced REST client`来进行测试\n\n在Chrome中通过这个[链接](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo)安装`Advanced REST client`插件，因为众所周知的原因，需要自备梯子。\n\n## 开始\n\n基于之前系列的基础，我们把API的目录架构设计下面的样子：\n\n\tRestfulApi\n\t\t|__ include\n\t\t \t\t|__ config.db.php\n\t\t \t\t|__ database.class.php\n\t\t|__\t libs\n\t\t \t\t|__ slim/\n\t\t|__ v1\n\t\t\t\t|__ index.php\n\t\t\n- libs – 放置第三方框架\n- include – 放置数据库链接及配置等文件\n- index.php – 处理接口请求的文件\n\n在 __v1__ 文件夹中创建 __index.php__ 文件，加入下面的代码。这里我们主要加入了需要引用的类库以及一些函数。\n\n__echoRespnse()__ – 输出json格式的返回值以及请求状态码。\n\n``` php\n<?php\n\nrequire '../libs/Slim/Slim.php';\nrequire_once '../include/database.class.php'; \n\n\\Slim\\Slim::registerAutoloader();\n$app = new \\Slim\\Slim();\n\n// connecting to db\n$db = new DbConnect();\n$conn = $db->connect();\n\n/**\n * Echoing json response to client\n * @param String $status_code Http response code\n * @param Int $response Json response\n */\nfunction echoRespnse($status_code, $response) {\n    $app = \\Slim\\Slim::getInstance();\n    // Http response code\n    $app->status($status_code);\n \n    // setting response content type to json\n    $app->contentType('application/json');\n \n    echo json_encode($response);\n}\n$app->run();\n```\n\n### => Getting All Girls\n\n下面的代码会拉取服务器上的一组列表下来，考虑到数据比较多，可以利用`p`和`size`参数来约束要拉取的数据。\n\n- size：每次拉取的数据的数量\n- p：分页，假设size=10，p=1就会拉取数据库中前10条数据，p=2就会拉取服务器第10-20条数据\n\n``` php\n$app->get('/girls', function () use ($app, $conn) {\n    $page = $app->request->get('p');\n    if ($page == '' || !is_numeric($page)) {\n   \t\t$page = 0;\n   \t}\n\t$size = $app->request->get('size');\n   \t// let the default size be 10\n   \tif ($size == '' || !is_numeric($size)) {\n   \t\t$size = 10;\n   \t} \n   \t$start = $size * intval($page);\n \n\t// get girl list from table\n   \tif ($_GET['ishot']) {\n    // hot girl\n   \t\t$sql = \"SELECT * FROM meizi WHERE 1 = 1 ORDER BY star_count DESC, id DESC LIMIT {$start}, {$size} \";\n   \t} else {\n    // new girl\n   \t\t$sql = \"SELECT * FROM meizi WHERE 1 = 1 ORDER BY id DESC LIMIT {$start}, {$size}\";\n   \t}\n\n   \t$result = $conn->query($sql)->fetch_all(MYSQLI_ASSOC);\n   \tif (!empty($result)) {\n\n    // check for empty result\n    // success\n   \t\t$response[\"code\"] = 1;\n   \t\t$response[\"msg\"] = \"success\";\n   \t\t$response[\"list\"] = $result;\n   \t\techoRespnse(200, $response);\n   \t} else {\n    // no girl found\n   \t\t$response[\"code\"] = 0;\n   \t\t$response[\"msg\"] = \"No girl found\";\n   \t\t$response[\"list\"] = array();\n   \t\techoRespnse(200, $response);\n\n   \t}\n});\n\n```\n\n- __URL__ : /girls\n- __Method__ : __GET__\n- __Params__ : p, size\n\n请求成功发出后，下面的json将会输出：\n\n\t\n\t{\n\tcode: 1\n\tmsg: \"success\"\n\tlist: [2]\n\t\t0:  {\n\t\t\tid: \"160\"\n\t\t\ttitle: \"睡不着 秒回么？\"\n\t\t\timgsrc: \"http://ww2.sinaimg.cn/bmiddle/0060lm7Tgw1evush3zicwj30dw0iu41b.jpg\"\n\t\t\ttopic_link: \"http://www.dbmeinv.com/dbgroup/417098\"\n\t\t\tstar_count: \"0\"\n\t\t\tupdate_time: \"1441697041\"\n\t\t\t}\n\t\t1:  {\n\t\t\tid: \"159\"\n\t\t\ttitle: \"【晒】\"\n\t\t\timgsrc: \"http://ww2.sinaimg.cn/bmiddle/0060lm7Tgw1evusfx74ipj30dw0iitbl.jpg\"\n\t\t\ttopic_link: \"http://www.dbmeinv.com/dbgroup/417122\"\n\t\t\tstar_count: \"0\"\n\t\t\tupdate_time: \"1441697041\"\n\t\t\t}\n\t}\n\n### => Updating a girl's star\n\n下面的代码将会更新某一个girl的`star_count`，为了定位到具体的girl，采用url结构 __girls/:girlid__ 的形式，具体请求的时候，需要用具体的id替换掉 __:girlid__.\n\n``` php\n$app->put('/girls/:girlid', function ($girlid) use ($app, $conn) {\n\tif ($girlid == '' || !is_numeric($girlid)) {\n    \t$response[\"code\"] = 0;\n    \t$response[\"msg\"] = \"oops, you need to tell me the girl's id\";\n     \texit(json_encode($response));\n\t}\n\n\t// let the girl's star_count + 1\n\t$result = $conn->query(\"UPDATE meizi set star_count = star_count + 1 WHERE id = {$girlid}\");\n\n\tif ($result) {\n    \t// success\n\t\t$response[\"code\"] = 1;\n\t\t$response[\"msg\"] = \"success\";\n\t\techoRespnse(200, $response);\n\t} else {\n    \t// no girl found\n\t\t$response[\"code\"] = 0;\n\t\t$response[\"msg\"] = \"failed\";\n\t\techoRespnse(200, $response);\n\t}\n});\n\n```\n\n-  URL : /girls/girlid (girlid要用girlid的字段值替换)\n- __Method__ : __PUT__ \n- __Params__ : -\n\n成功调用接口，会看到如下的打印：\n\n\t{\n\t\tcode: 1\n\t\tmsg: \"success\"\n\t}\n\n## 测试接口\n\n## 最后\n\n按照惯例，放上源码地址：\n\n\n\n\n","source":"_posts/2015-9-10-fullstack-of-Scrapy+MySQL+PHP+Swift6.md","raw":"---\nlayout: post\ntitle:  \"Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇\"\ndate:   2015-09-10 14:30:00\ntags:\n  - Linux\n  - Scrapy\n  - Swift\n---\n\n##系列目录\n\n你可以从这个地方做一个快速跳转。\n\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift1.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（二）之爬虫篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift2.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（三）之数据库MySQL篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（七）之Swift篇]()\n\n## 温故而知新\n\n上个系列中，我们编写了客户端跟服务器数据库沟通的接口文件。\n\n考虑到我们将会编写iOS客户端程序，或许将来还会有Android程序和Web App，那么构建`REST API`来进行App和服务器的沟通将是一个很好的选择。\n\n本次系列将会构建一个简单的`REST API`.\n\n## 准备工作\n\n1. 关于`REST API`，参考这个[链接](http://www.ruanyifeng.com/blog/2014/05/restful_api.html)了解\n2. HTTP Methods：设计良好的 RESTful API 应该支持主流的请求方法，并且依据具体的操作类型在选择使用哪中方法的时候应该取决于操作类型\n\n\t- __GET__ ： 拉取一条资源\n\t- __POST__ ：新建一条资源\n\t- __PUT__ ：更新一条资源 \n\t- __DELETE__ ：删除一条资源\n\n3. Slim PHP Micro Framework\n\n\t为了站在巨人的肩膀上，我们选择利用`Slim`这个框架来进行开发。 `Slim`作为一个支持REST API的开发框架，轻量且容易上手，可以从这个[链接](https://github.com/codeguy/Slim)下载。\n\n4. 安装谷歌浏览器插件`Advanced REST client`来进行测试\n\n在Chrome中通过这个[链接](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo)安装`Advanced REST client`插件，因为众所周知的原因，需要自备梯子。\n\n## 开始\n\n基于之前系列的基础，我们把API的目录架构设计下面的样子：\n\n\tRestfulApi\n\t\t|__ include\n\t\t \t\t|__ config.db.php\n\t\t \t\t|__ database.class.php\n\t\t|__\t libs\n\t\t \t\t|__ slim/\n\t\t|__ v1\n\t\t\t\t|__ index.php\n\t\t\n- libs – 放置第三方框架\n- include – 放置数据库链接及配置等文件\n- index.php – 处理接口请求的文件\n\n在 __v1__ 文件夹中创建 __index.php__ 文件，加入下面的代码。这里我们主要加入了需要引用的类库以及一些函数。\n\n__echoRespnse()__ – 输出json格式的返回值以及请求状态码。\n\n``` php\n<?php\n\nrequire '../libs/Slim/Slim.php';\nrequire_once '../include/database.class.php'; \n\n\\Slim\\Slim::registerAutoloader();\n$app = new \\Slim\\Slim();\n\n// connecting to db\n$db = new DbConnect();\n$conn = $db->connect();\n\n/**\n * Echoing json response to client\n * @param String $status_code Http response code\n * @param Int $response Json response\n */\nfunction echoRespnse($status_code, $response) {\n    $app = \\Slim\\Slim::getInstance();\n    // Http response code\n    $app->status($status_code);\n \n    // setting response content type to json\n    $app->contentType('application/json');\n \n    echo json_encode($response);\n}\n$app->run();\n```\n\n### => Getting All Girls\n\n下面的代码会拉取服务器上的一组列表下来，考虑到数据比较多，可以利用`p`和`size`参数来约束要拉取的数据。\n\n- size：每次拉取的数据的数量\n- p：分页，假设size=10，p=1就会拉取数据库中前10条数据，p=2就会拉取服务器第10-20条数据\n\n``` php\n$app->get('/girls', function () use ($app, $conn) {\n    $page = $app->request->get('p');\n    if ($page == '' || !is_numeric($page)) {\n   \t\t$page = 0;\n   \t}\n\t$size = $app->request->get('size');\n   \t// let the default size be 10\n   \tif ($size == '' || !is_numeric($size)) {\n   \t\t$size = 10;\n   \t} \n   \t$start = $size * intval($page);\n \n\t// get girl list from table\n   \tif ($_GET['ishot']) {\n    // hot girl\n   \t\t$sql = \"SELECT * FROM meizi WHERE 1 = 1 ORDER BY star_count DESC, id DESC LIMIT {$start}, {$size} \";\n   \t} else {\n    // new girl\n   \t\t$sql = \"SELECT * FROM meizi WHERE 1 = 1 ORDER BY id DESC LIMIT {$start}, {$size}\";\n   \t}\n\n   \t$result = $conn->query($sql)->fetch_all(MYSQLI_ASSOC);\n   \tif (!empty($result)) {\n\n    // check for empty result\n    // success\n   \t\t$response[\"code\"] = 1;\n   \t\t$response[\"msg\"] = \"success\";\n   \t\t$response[\"list\"] = $result;\n   \t\techoRespnse(200, $response);\n   \t} else {\n    // no girl found\n   \t\t$response[\"code\"] = 0;\n   \t\t$response[\"msg\"] = \"No girl found\";\n   \t\t$response[\"list\"] = array();\n   \t\techoRespnse(200, $response);\n\n   \t}\n});\n\n```\n\n- __URL__ : /girls\n- __Method__ : __GET__\n- __Params__ : p, size\n\n请求成功发出后，下面的json将会输出：\n\n\t\n\t{\n\tcode: 1\n\tmsg: \"success\"\n\tlist: [2]\n\t\t0:  {\n\t\t\tid: \"160\"\n\t\t\ttitle: \"睡不着 秒回么？\"\n\t\t\timgsrc: \"http://ww2.sinaimg.cn/bmiddle/0060lm7Tgw1evush3zicwj30dw0iu41b.jpg\"\n\t\t\ttopic_link: \"http://www.dbmeinv.com/dbgroup/417098\"\n\t\t\tstar_count: \"0\"\n\t\t\tupdate_time: \"1441697041\"\n\t\t\t}\n\t\t1:  {\n\t\t\tid: \"159\"\n\t\t\ttitle: \"【晒】\"\n\t\t\timgsrc: \"http://ww2.sinaimg.cn/bmiddle/0060lm7Tgw1evusfx74ipj30dw0iitbl.jpg\"\n\t\t\ttopic_link: \"http://www.dbmeinv.com/dbgroup/417122\"\n\t\t\tstar_count: \"0\"\n\t\t\tupdate_time: \"1441697041\"\n\t\t\t}\n\t}\n\n### => Updating a girl's star\n\n下面的代码将会更新某一个girl的`star_count`，为了定位到具体的girl，采用url结构 __girls/:girlid__ 的形式，具体请求的时候，需要用具体的id替换掉 __:girlid__.\n\n``` php\n$app->put('/girls/:girlid', function ($girlid) use ($app, $conn) {\n\tif ($girlid == '' || !is_numeric($girlid)) {\n    \t$response[\"code\"] = 0;\n    \t$response[\"msg\"] = \"oops, you need to tell me the girl's id\";\n     \texit(json_encode($response));\n\t}\n\n\t// let the girl's star_count + 1\n\t$result = $conn->query(\"UPDATE meizi set star_count = star_count + 1 WHERE id = {$girlid}\");\n\n\tif ($result) {\n    \t// success\n\t\t$response[\"code\"] = 1;\n\t\t$response[\"msg\"] = \"success\";\n\t\techoRespnse(200, $response);\n\t} else {\n    \t// no girl found\n\t\t$response[\"code\"] = 0;\n\t\t$response[\"msg\"] = \"failed\";\n\t\techoRespnse(200, $response);\n\t}\n});\n\n```\n\n-  URL : /girls/girlid (girlid要用girlid的字段值替换)\n- __Method__ : __PUT__ \n- __Params__ : -\n\n成功调用接口，会看到如下的打印：\n\n\t{\n\t\tcode: 1\n\t\tmsg: \"success\"\n\t}\n\n## 测试接口\n\n## 最后\n\n按照惯例，放上源码地址：\n\n\n\n\n","slug":"2015-9-10-fullstack-of-Scrapy-MySQL-PHP-Swift6","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8o5000k3js67vz81pp1"},{"layout":"post","title":"通过upyun解决iOS7.1后使用AdHoc下载的问题","date":"2015-09-01T05:13:13.000Z","_content":"## 前言\n\n相信大家都已经知道，在苹果发布iOS7.1后，AdHoc不能够接受未经ssl验证的mainfest了，也就是说plist文件的路径需要从http转换为https了。\n\n\titms-services://?action=download-manifest&url=http://yourdomain.com/app.plist\n\t==> //更换为\n\titms-services://?action=download-manifest&url=https://yourdomain.com/app.plist\n\n应对这个改变，我们有两种方法可以采取：\n\n- 在本地局域网搭建ssl环境。之前的博客[Mac OS X 中为Apache开启ssl]()就是为了应对这个改变做得一些尝试，但是无奈在本地局域网中配置证书太过麻烦，最终放弃。想要尝试该方法的童鞋可以参考[这篇博客](http://blog.cnbluebox.com/blog/2014/03/25/ios7-dot-1xia-shi-yong-adhocfang-fa-xia-zai-de-jie-jue-fang-an/)\n- 采用https外链。很高兴了解到[upyun]()今天（2015.9.1）宣布全面免费，并且upyun是支持做https外链的。所以今天主要尝试通过upyun做一个支持ssl的外链。\n\n仔细想想，是不是今后博客中的图片都可以放在upyun做CDN加速了，吼吼。\n\n## 准备工作\n\n注册upyun成功后会提示必须绑定支付宝做实名认证，否则无法享受全部功能，吓得我赶紧连接支付宝做了实名认证，没有做实验不实名认证的话，是否支持https外链功能。\n\n添加一个`存储类`空间，并为这个空间开启https访问功能，如下图：\n\n![](http://redharry.b0.upaiyun.com/pic/upyun_with_ssl.gif)\n\n哈哈，其实这么简单地步骤完全没有必要上图，我只是单纯想测试下Mac上录制gif图片（我用的是[Recordit](http://www.recordit.co/)这个软件）以及测试下upyun的CDN图片加速。\n\n## 上传文件\n\n上传文件需要先创建一个`操作员`。在`账号管理`菜单下选择`操作员管理`来新建一个操作员，并在`通用`菜单中选择`操作员管理授权`将刚才新建的操作员授权于管理空间权限。\n\n假设现在我们有一个名为`bucket`的空间，并且为这个空间授权了一个名为`user`的操作员。那么：\n\n1. 关于FTP的配置\n\n\t- 主机：v1.ftp.upyun.com (电信) v2.ftp.upyun.com (联通网通) v3.ftp.upyun.com (移动铁通) v0.ftp.upyun.com (自动判断\n\t- 用户：操作员的用户名/空间名（对应我们的空间应该是`user/bucket`）\n\t- 密码：操作员的密码\n\t- 端口：21\n\t- 文件传输协议：FTP\n\n2. 关于外链的配置\n\n\t- 默认域名：bucket.b0.upaiyun.com （bucket是空间名）\n\t- 文件访问方式：http://默认域名/文件路径\n（例如：文件路径/dir/pic.jpg 该图片对外访问地址为：http://bucket.b0.upaiyun.com/dir/pic.jpg）\n\t- ssl方式只需将http替换为https\n\t- 如果绑定了自己的域名，只需将默认域名替换为自己的域名就可以了\n\n\n如果是使用客户端的话，推荐使用[FileZilla]()这个软件，不要再提Finder的远程连接服务器了，功能弱爆了。\n\n成功登陆后的软件界面大概是这个样子：\n\n![](http://redharry.b0.upaiyun.com/pic/how_does_filezilla_looks_like.png)\n\n可以直接把文件拖到红框圈住的地方实现文件的上传。\n\n如果非要使用终端的话，下面是终端的操作：\n\n\t// 以`user/bucket`这个用户登录ftp服务器\n\tftp user/bucket@v1.ftp.upyun.com\n\t// 然后输入密码\n\t// 登录成功\n\t// 查看所有可用命令\n\t？\n\t// 上传本地文件\n\tput Info.plist /plist/abc.plist //将本地的工作目录下地Info.plist 上传至服务器/plist/abc.plist这个路径，plist这个文件夹如不存在，会自动创建\n\t// 下载远程文件\n\tget /plist/abc.plist abc.plist //将远程服务器/plist/abc.plist 拷贝到本地工作目录下\n\t\n至此，就可以通过`https://bucket.b0.upaiyun.com/plist/abc.plist`这个外链来访问plist文件了。\n\n\n\n\n\n\n\n\t\n\n","source":"_posts/2015-9-1-use-adhoc-with-upyun.md","raw":"---\nlayout: post\ntitle:  \"通过upyun解决iOS7.1后使用AdHoc下载的问题\"\ndate:   2015-09-01 13:13:13\n---\n## 前言\n\n相信大家都已经知道，在苹果发布iOS7.1后，AdHoc不能够接受未经ssl验证的mainfest了，也就是说plist文件的路径需要从http转换为https了。\n\n\titms-services://?action=download-manifest&url=http://yourdomain.com/app.plist\n\t==> //更换为\n\titms-services://?action=download-manifest&url=https://yourdomain.com/app.plist\n\n应对这个改变，我们有两种方法可以采取：\n\n- 在本地局域网搭建ssl环境。之前的博客[Mac OS X 中为Apache开启ssl]()就是为了应对这个改变做得一些尝试，但是无奈在本地局域网中配置证书太过麻烦，最终放弃。想要尝试该方法的童鞋可以参考[这篇博客](http://blog.cnbluebox.com/blog/2014/03/25/ios7-dot-1xia-shi-yong-adhocfang-fa-xia-zai-de-jie-jue-fang-an/)\n- 采用https外链。很高兴了解到[upyun]()今天（2015.9.1）宣布全面免费，并且upyun是支持做https外链的。所以今天主要尝试通过upyun做一个支持ssl的外链。\n\n仔细想想，是不是今后博客中的图片都可以放在upyun做CDN加速了，吼吼。\n\n## 准备工作\n\n注册upyun成功后会提示必须绑定支付宝做实名认证，否则无法享受全部功能，吓得我赶紧连接支付宝做了实名认证，没有做实验不实名认证的话，是否支持https外链功能。\n\n添加一个`存储类`空间，并为这个空间开启https访问功能，如下图：\n\n![](http://redharry.b0.upaiyun.com/pic/upyun_with_ssl.gif)\n\n哈哈，其实这么简单地步骤完全没有必要上图，我只是单纯想测试下Mac上录制gif图片（我用的是[Recordit](http://www.recordit.co/)这个软件）以及测试下upyun的CDN图片加速。\n\n## 上传文件\n\n上传文件需要先创建一个`操作员`。在`账号管理`菜单下选择`操作员管理`来新建一个操作员，并在`通用`菜单中选择`操作员管理授权`将刚才新建的操作员授权于管理空间权限。\n\n假设现在我们有一个名为`bucket`的空间，并且为这个空间授权了一个名为`user`的操作员。那么：\n\n1. 关于FTP的配置\n\n\t- 主机：v1.ftp.upyun.com (电信) v2.ftp.upyun.com (联通网通) v3.ftp.upyun.com (移动铁通) v0.ftp.upyun.com (自动判断\n\t- 用户：操作员的用户名/空间名（对应我们的空间应该是`user/bucket`）\n\t- 密码：操作员的密码\n\t- 端口：21\n\t- 文件传输协议：FTP\n\n2. 关于外链的配置\n\n\t- 默认域名：bucket.b0.upaiyun.com （bucket是空间名）\n\t- 文件访问方式：http://默认域名/文件路径\n（例如：文件路径/dir/pic.jpg 该图片对外访问地址为：http://bucket.b0.upaiyun.com/dir/pic.jpg）\n\t- ssl方式只需将http替换为https\n\t- 如果绑定了自己的域名，只需将默认域名替换为自己的域名就可以了\n\n\n如果是使用客户端的话，推荐使用[FileZilla]()这个软件，不要再提Finder的远程连接服务器了，功能弱爆了。\n\n成功登陆后的软件界面大概是这个样子：\n\n![](http://redharry.b0.upaiyun.com/pic/how_does_filezilla_looks_like.png)\n\n可以直接把文件拖到红框圈住的地方实现文件的上传。\n\n如果非要使用终端的话，下面是终端的操作：\n\n\t// 以`user/bucket`这个用户登录ftp服务器\n\tftp user/bucket@v1.ftp.upyun.com\n\t// 然后输入密码\n\t// 登录成功\n\t// 查看所有可用命令\n\t？\n\t// 上传本地文件\n\tput Info.plist /plist/abc.plist //将本地的工作目录下地Info.plist 上传至服务器/plist/abc.plist这个路径，plist这个文件夹如不存在，会自动创建\n\t// 下载远程文件\n\tget /plist/abc.plist abc.plist //将远程服务器/plist/abc.plist 拷贝到本地工作目录下\n\t\n至此，就可以通过`https://bucket.b0.upaiyun.com/plist/abc.plist`这个外链来访问plist文件了。\n\n\n\n\n\n\n\n\t\n\n","slug":"2015-9-1-use-adhoc-with-upyun","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8o7000o3js66174dpav"},{"layout":"post","title":"Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇","date":"2015-08-08T14:22:33.000Z","_content":"\n##系列目录\n\n你可以从这个地方做一个快速跳转。\n\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇]({{ page.url }})\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（二）之爬虫篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（三）之数据库MySQL篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（七）之Swift篇]()\n\n##缘由\n\n前端时间读到[叶孤城 ](http://www.jianshu.com/users/b82d2721ba07/latest_articles)的博客，有个系列文档是讲怎么实现从服务端后台到移动端App的整个过程，看了很受触动。真的非常感谢iOS业界有这些经常将自己的技术实践分享出来的前辈，从他们的博客中可以收获很多东西。之所以还要写这个系列，是因为在[叶孤城](http://www.jianshu.com/users/b82d2721ba07/latest_articles)的博客文章中，是通过Mongodb数据库将数据存储起来的，在接口层是通过Python实现的。佳缘的后台是通过MySQL+PHP实现的，所以便打算将爬虫里面的Mongodb存储替换成MySQL，在接口层替换Python通过PHP操作MySQL。之前的博客中有提到过，我最近有买了一台服务器，所以顺便学习了将爬虫部署在服务器上，以及爬虫的自动运行等。\n\n这个系列的文档仅是做为入门的一个实现，毕竟之前也没有做过Python的开发。随着技术的深入了解，我会随时补充一些东西。\n\n##这个系列到底做些什么\n\n如文章标题所说，这个系列我主要通过爬虫爬了一家网站的妹子的照片，然后把照片相关信息存储到了MySQL数据库。然后把这个爬虫部署在服务器上（没有服务器的话在自己的电脑上也是可以的，保证电脑长时间是开机状态即可）让爬虫自动运行。这样我们就有了持续不断的内容了。接着在接口层，要开发一个接口，提供给客户端每天的最新照片信息，以及给照片点赞的接口。在客户端层面，要展示一组图片列表，要实现客户端的点赞功能跟服务器的交互。客户端会通过图片的点赞数量，选出当日热门图片。客户端主要会采用Swift编写。\n\n目前为止，这个项目已经进展到了接口阶段，服务器的数据库上每天都会有新的信息保存进来。接下来的时间，我会把已经完成的部分抽空更新出来。\n\n\n","source":"_posts/2015-8-8-fullstack-of-Scrapy+MySQL+PHP+Swift.md","raw":"---\nlayout: post\ntitle:  \"Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇\"\ndate:   2015-08-08 22:22:33\ntags:\n  - Linux\n  - Scrapy\n  - Swift\n---\n\n##系列目录\n\n你可以从这个地方做一个快速跳转。\n\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇]({{ page.url }})\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（二）之爬虫篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（三）之数据库MySQL篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（七）之Swift篇]()\n\n##缘由\n\n前端时间读到[叶孤城 ](http://www.jianshu.com/users/b82d2721ba07/latest_articles)的博客，有个系列文档是讲怎么实现从服务端后台到移动端App的整个过程，看了很受触动。真的非常感谢iOS业界有这些经常将自己的技术实践分享出来的前辈，从他们的博客中可以收获很多东西。之所以还要写这个系列，是因为在[叶孤城](http://www.jianshu.com/users/b82d2721ba07/latest_articles)的博客文章中，是通过Mongodb数据库将数据存储起来的，在接口层是通过Python实现的。佳缘的后台是通过MySQL+PHP实现的，所以便打算将爬虫里面的Mongodb存储替换成MySQL，在接口层替换Python通过PHP操作MySQL。之前的博客中有提到过，我最近有买了一台服务器，所以顺便学习了将爬虫部署在服务器上，以及爬虫的自动运行等。\n\n这个系列的文档仅是做为入门的一个实现，毕竟之前也没有做过Python的开发。随着技术的深入了解，我会随时补充一些东西。\n\n##这个系列到底做些什么\n\n如文章标题所说，这个系列我主要通过爬虫爬了一家网站的妹子的照片，然后把照片相关信息存储到了MySQL数据库。然后把这个爬虫部署在服务器上（没有服务器的话在自己的电脑上也是可以的，保证电脑长时间是开机状态即可）让爬虫自动运行。这样我们就有了持续不断的内容了。接着在接口层，要开发一个接口，提供给客户端每天的最新照片信息，以及给照片点赞的接口。在客户端层面，要展示一组图片列表，要实现客户端的点赞功能跟服务器的交互。客户端会通过图片的点赞数量，选出当日热门图片。客户端主要会采用Swift编写。\n\n目前为止，这个项目已经进展到了接口阶段，服务器的数据库上每天都会有新的信息保存进来。接下来的时间，我会把已经完成的部分抽空更新出来。\n\n\n","slug":"2015-8-8-fullstack-of-Scrapy-MySQL-PHP-Swift","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8oa000p3js6b2tp5a77"},{"layout":"post","title":"Scrapy+MySQL+PHP+Swift开发攻略系列（二）爬虫篇","date":"2015-08-29T01:09:09.000Z","_content":"\n##系列目录\n\n你可以从这个地方做一个快速跳转。\n\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（二）之爬虫篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（三）之数据库MySQL篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（七）之Swift篇]()\n\n##安装Scrapy\n爬虫框架我选择用Python写的Scrapy。\n\n当然准备工作是确保你的Mac安装了`commandline`和`pip`.\n\n- 安装`commandline`可以通过直接安装`Xcode`或者在终端运行`xcode-select --install`命令安装。\n- 安装`pip`：遵从官方的这个[步骤](https://pip.pypa.io/en/stable/installing.html#install-pip)\n\n然后通过`pip`安装`Scrapy`.\n\t\n\tsudo pip install scrapy\n\t\n如果你安装成功，请直接跳到下一节。我在公司电脑的环境（OS X 10.10 Python2.7.10）以及家里的电脑的环境（OS X 10.11 Python2.7.10）下安装会因为类似`libxml not found`的原因失败，通过以下方式解决：\n\n\tbrew install libxml2\n\tbrew install libxslt\n\tbrew link libxml2 --force\n\tbrew link libxslt --force\n\n\n安装成功以后，如果`scrapy startproject xxx`报类似的错`ImportError: cannot import name xmlrpc_client`，通过以下方式解决：\n\n\tsudo rm -rf /Library/Python/2.7/site-packages/six*\n\tsudo rm -rf /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/six*\n\tsudo pip install six\n\n如果以上方法不能失效，请参考[这个链接](http://stackoverflow.com/questions/30964836/scrapy-throws-importerror-cannot-import-name-xmlrpc-client)\n\n## 创建爬虫项目\n\n通过下面这个命令生成一个爬虫项目：\n\n\tscrapy startproject dbmeizi\n\t\n然后我们会看到`scrapy`已经为我们生成了一个工程。这个工程大概是这个结构\n\t\n\tdbmeizi\n\t|__ scrapy.cfg\n\t|\n\t|__\t dbmeizi\n\t\t |__ __init__.py\n\t\t |__ items.py\n\t\t |__ pipelines.py\n\t\t |__ settings.py\n\t\t |__ spiders\n\n下面分别解释下各个文件：\n\n- `items.py` - item相当于是mvc中的model，在items里我们定义了自己需要的模型\n- `piplines.py` - pipline俗称管道，这个文件主要用来把我们获取的item类型存入MySQL\n- `settings.py` -  在这个文件里面配置整个工程的一些设置。例如MySQL的数据库名，数据库地址和数据库端口号等等。\n- `spiders` - 这个文件夹存放爬虫文件。\n\n至此，我们就可以正式开始我们的编码工作了。\n\n## 定义Model层（Item）\n\n首先我们想确定一个网站上的图片包含哪些信息，要解决这个问题，就需要打开这个网页使用`开发者工具`(快捷键`option+command+i`), 使用`页面选择器`(开发者工作左上角的放大镜图标)选择一张图片，效果如下:\n\n![](/assets/2015/img_spiders01.png)\n\n\n可以看出，我们选中的`div`块中包含了我们想要的最基本的资料。这个过程，其实就是我们爬虫的一个工作原理，通过网页元素找到我们想要的内容，只不过现在我们是手动查找，等发现规律，我们就通过爬虫程序自动爬取内容。\n\n所以item.py里面是这个样子：\n\n\t// 需要注意的是这个文件的默认模板样式可能根据scrapy版本不同略有不同，依照默认模板样式加入我们的自定义字段就可\n\t\n\timport scrapy\n\n\tclass DbmeiziItem(scrapy.Item):\n    \t# define the fields for your item here like:\n    \t# name = scrapy.Field()\n    \timgsrc = scrapy.Field()\n    \ttitle = scrapy.Field()\n    \ttopic_link = scrapy.Field()\n    \tstar_count = scrapy.Field()\n    \tupdate_time = scrapy.Field()\n    \tpass\n    \t\n相当于我们继承自类Item创建了我们自己的MeiziItem，然后我们的自定义类有5个属性，`star_count`是设计用来让用户点赞的，最后的`update_time `可以用来记录修改时间。\n\n## 编写爬虫(Spider)\n\nSpider是我们用于从单个网站(或者一些网站)爬取数据的类。\n\n其中包含了一个用于下载的初始URL，如何跟进网页中的链接以及如何分析页面中的内容， 提取生成`item`的方法。\n\n在`spiders`文件夹下新建`dbmeizi_scrapy.py`文件。\n这个文件里面是这个样子：\n\n``` python\n\nfrom scrapy import Spider\nfrom scrapy.selector import Selector\nfrom dbmeizi.items import DbmeiziItem\nimport time\n\nclass dbmeiziSpider(Spider):\n    name = \"dbmeiziSpider\"\n    allowed_domin =[\"dbmeinv.com\"]\n    strArray = []\n    for i in range(1, 3, 1):\n        str = \"http://www.dbmeinv.com/?pager_offset=%d\" % i\n        strArray.append(str)\n    start_urls = strArray\n            \n    def parse(self, response):\n        divResults = Selector(response).xpath('//div[@class=\"img_single\"]')\n        for div in divResults:\n            item = DbmeiziItem()\n            href = div.xpath('.//a')[0]\n            img = div.xpath('.//img')[0]\n            item['topic_link'] = href.xpath('@href').extract()[0]\n            item['title'] = img.xpath('@title').extract()[0] \n            item['imgsrc'] = img.xpath('@src').extract()[0]\n            item['star_count'] = 0\n            item['update_time'] = time.time()\n            yield item\n    \n``` \n\n需要解释的几点概念：\n\n- `allowed_domin ` - 指定在哪个网站爬东西\n- `start_urls` - 包含了Spider在启动时进行爬取的url列表。因此，第一个被获取到的页面将是其中之一。后续的URL则从初始的URL获取到的数据中提取\n- `parse `方法 - 继承自父类，每个初始URL完成下载后生成的`Response`对象将会作为唯一的参数传递给该函数。该方法负责解析返回的数据(response data)，提取数据(生成`item`)以及生成需要进一步处理的URL的`Request`对象。可以想象成这个方法一开始拿到的数据就是整个网页的html代码，我们要通过各种过滤，拿到最终我们感兴趣的内容\n- `xpath` - 解析数据的时候我们用到这个东西，关于它的详细用法，移步这个[网址](http://www.w3school.com.cn/xpath/index.asp)\n\n\n最终，爬虫通过上面的代码爬到我们感兴趣的内容了，通过这些内容为`item`赋值。\n\n\n\n## 运行爬虫\n到现在为止，这个爬虫就可以正常工作了。在工程的根目录下执行如下命令：\n\n\tscrapy crawl dbmeiziSpider\n\n不出意外的话，会看见下面的画面：\n\n![](http://redharry.b0.upaiyun.com/pic/spider_show01.gif)\n\n大功告成。\n\n刚才提到不出意外的情况，那么出意味的情况是什么呢，当然就是这个网站把我们屏蔽了，我们爬不到他的数据了。针对这种情况，会在系列（四）中给出解决方案。\n\n还有一种意外情况，就是我们要爬取的网站会检查请求的`User-Agent`，如果不设置`User-Agent`，网站可能就会拒绝我们的请求。针对这种情况，在`settings.py`这个文件里面加上下面一行代码：\n\t\n\tUSER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20'\n\n然后重新执行`scrapy crawl dbmeiziSpider`.\n\n\n## 最后\n\n按照惯例，放上源码地址：\n\n\n\n\n","source":"_posts/2015-8-29-fullstack-of-Scrapy+MySQL+PHP+Swift2.md","raw":"---\nlayout: post\ntitle:  \"Scrapy+MySQL+PHP+Swift开发攻略系列（二）爬虫篇\"\ndate:   2015-08-29 09:09:09\ncategories: jekyll update\ntags:\n  - Linux\n  - Scrapy\n  - Swift\n---\n\n##系列目录\n\n你可以从这个地方做一个快速跳转。\n\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇](http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift.html)\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（二）之爬虫篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（三）之数据库MySQL篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇]()\n- [Scrapy+MySQL+PHP+Swift开发攻略系列（七）之Swift篇]()\n\n##安装Scrapy\n爬虫框架我选择用Python写的Scrapy。\n\n当然准备工作是确保你的Mac安装了`commandline`和`pip`.\n\n- 安装`commandline`可以通过直接安装`Xcode`或者在终端运行`xcode-select --install`命令安装。\n- 安装`pip`：遵从官方的这个[步骤](https://pip.pypa.io/en/stable/installing.html#install-pip)\n\n然后通过`pip`安装`Scrapy`.\n\t\n\tsudo pip install scrapy\n\t\n如果你安装成功，请直接跳到下一节。我在公司电脑的环境（OS X 10.10 Python2.7.10）以及家里的电脑的环境（OS X 10.11 Python2.7.10）下安装会因为类似`libxml not found`的原因失败，通过以下方式解决：\n\n\tbrew install libxml2\n\tbrew install libxslt\n\tbrew link libxml2 --force\n\tbrew link libxslt --force\n\n\n安装成功以后，如果`scrapy startproject xxx`报类似的错`ImportError: cannot import name xmlrpc_client`，通过以下方式解决：\n\n\tsudo rm -rf /Library/Python/2.7/site-packages/six*\n\tsudo rm -rf /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/six*\n\tsudo pip install six\n\n如果以上方法不能失效，请参考[这个链接](http://stackoverflow.com/questions/30964836/scrapy-throws-importerror-cannot-import-name-xmlrpc-client)\n\n## 创建爬虫项目\n\n通过下面这个命令生成一个爬虫项目：\n\n\tscrapy startproject dbmeizi\n\t\n然后我们会看到`scrapy`已经为我们生成了一个工程。这个工程大概是这个结构\n\t\n\tdbmeizi\n\t|__ scrapy.cfg\n\t|\n\t|__\t dbmeizi\n\t\t |__ __init__.py\n\t\t |__ items.py\n\t\t |__ pipelines.py\n\t\t |__ settings.py\n\t\t |__ spiders\n\n下面分别解释下各个文件：\n\n- `items.py` - item相当于是mvc中的model，在items里我们定义了自己需要的模型\n- `piplines.py` - pipline俗称管道，这个文件主要用来把我们获取的item类型存入MySQL\n- `settings.py` -  在这个文件里面配置整个工程的一些设置。例如MySQL的数据库名，数据库地址和数据库端口号等等。\n- `spiders` - 这个文件夹存放爬虫文件。\n\n至此，我们就可以正式开始我们的编码工作了。\n\n## 定义Model层（Item）\n\n首先我们想确定一个网站上的图片包含哪些信息，要解决这个问题，就需要打开这个网页使用`开发者工具`(快捷键`option+command+i`), 使用`页面选择器`(开发者工作左上角的放大镜图标)选择一张图片，效果如下:\n\n![](/assets/2015/img_spiders01.png)\n\n\n可以看出，我们选中的`div`块中包含了我们想要的最基本的资料。这个过程，其实就是我们爬虫的一个工作原理，通过网页元素找到我们想要的内容，只不过现在我们是手动查找，等发现规律，我们就通过爬虫程序自动爬取内容。\n\n所以item.py里面是这个样子：\n\n\t// 需要注意的是这个文件的默认模板样式可能根据scrapy版本不同略有不同，依照默认模板样式加入我们的自定义字段就可\n\t\n\timport scrapy\n\n\tclass DbmeiziItem(scrapy.Item):\n    \t# define the fields for your item here like:\n    \t# name = scrapy.Field()\n    \timgsrc = scrapy.Field()\n    \ttitle = scrapy.Field()\n    \ttopic_link = scrapy.Field()\n    \tstar_count = scrapy.Field()\n    \tupdate_time = scrapy.Field()\n    \tpass\n    \t\n相当于我们继承自类Item创建了我们自己的MeiziItem，然后我们的自定义类有5个属性，`star_count`是设计用来让用户点赞的，最后的`update_time `可以用来记录修改时间。\n\n## 编写爬虫(Spider)\n\nSpider是我们用于从单个网站(或者一些网站)爬取数据的类。\n\n其中包含了一个用于下载的初始URL，如何跟进网页中的链接以及如何分析页面中的内容， 提取生成`item`的方法。\n\n在`spiders`文件夹下新建`dbmeizi_scrapy.py`文件。\n这个文件里面是这个样子：\n\n``` python\n\nfrom scrapy import Spider\nfrom scrapy.selector import Selector\nfrom dbmeizi.items import DbmeiziItem\nimport time\n\nclass dbmeiziSpider(Spider):\n    name = \"dbmeiziSpider\"\n    allowed_domin =[\"dbmeinv.com\"]\n    strArray = []\n    for i in range(1, 3, 1):\n        str = \"http://www.dbmeinv.com/?pager_offset=%d\" % i\n        strArray.append(str)\n    start_urls = strArray\n            \n    def parse(self, response):\n        divResults = Selector(response).xpath('//div[@class=\"img_single\"]')\n        for div in divResults:\n            item = DbmeiziItem()\n            href = div.xpath('.//a')[0]\n            img = div.xpath('.//img')[0]\n            item['topic_link'] = href.xpath('@href').extract()[0]\n            item['title'] = img.xpath('@title').extract()[0] \n            item['imgsrc'] = img.xpath('@src').extract()[0]\n            item['star_count'] = 0\n            item['update_time'] = time.time()\n            yield item\n    \n``` \n\n需要解释的几点概念：\n\n- `allowed_domin ` - 指定在哪个网站爬东西\n- `start_urls` - 包含了Spider在启动时进行爬取的url列表。因此，第一个被获取到的页面将是其中之一。后续的URL则从初始的URL获取到的数据中提取\n- `parse `方法 - 继承自父类，每个初始URL完成下载后生成的`Response`对象将会作为唯一的参数传递给该函数。该方法负责解析返回的数据(response data)，提取数据(生成`item`)以及生成需要进一步处理的URL的`Request`对象。可以想象成这个方法一开始拿到的数据就是整个网页的html代码，我们要通过各种过滤，拿到最终我们感兴趣的内容\n- `xpath` - 解析数据的时候我们用到这个东西，关于它的详细用法，移步这个[网址](http://www.w3school.com.cn/xpath/index.asp)\n\n\n最终，爬虫通过上面的代码爬到我们感兴趣的内容了，通过这些内容为`item`赋值。\n\n\n\n## 运行爬虫\n到现在为止，这个爬虫就可以正常工作了。在工程的根目录下执行如下命令：\n\n\tscrapy crawl dbmeiziSpider\n\n不出意外的话，会看见下面的画面：\n\n![](http://redharry.b0.upaiyun.com/pic/spider_show01.gif)\n\n大功告成。\n\n刚才提到不出意外的情况，那么出意味的情况是什么呢，当然就是这个网站把我们屏蔽了，我们爬不到他的数据了。针对这种情况，会在系列（四）中给出解决方案。\n\n还有一种意外情况，就是我们要爬取的网站会检查请求的`User-Agent`，如果不设置`User-Agent`，网站可能就会拒绝我们的请求。针对这种情况，在`settings.py`这个文件里面加上下面一行代码：\n\t\n\tUSER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20'\n\n然后重新执行`scrapy crawl dbmeiziSpider`.\n\n\n## 最后\n\n按照惯例，放上源码地址：\n\n\n\n\n","slug":"2015-8-29-fullstack-of-Scrapy-MySQL-PHP-Swift2","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8od000t3js630b8am4v"},{"layout":"post","title":"WWDC2015 Session笔记-App Thinning","date":"2015-07-04T14:45:36.000Z","_content":"\n本文是我依据 WWDC15 Session Video 写的一篇笔记，涉及的 Session 有\n\n-[App Thinning in Xcode](https://developer.apple.com/videos/wwdc/2015/?id=404)\n\n##重要\n- 苹果指出，使用App-Thinning的前提是使用Asset Catalog管理资源文件\n- 在苹果的演示中，一个约74M的应用程序经过Thinning后变为约22M，效果还是很惊人的\n\n##我们需要了解的\n- 如何使应用程序的体积变得越小\n- 开发和提交应用程序的时候需要做些什么以使App-Thinning生效\n\n\n##Work Flow\n\n###创建\n\n苹果说明必须使用Asset Catalog管理资源文件才可以使App-Thinning生效，Xcode7.0以前新建的默认工程里面有Images.xcassets这个文件夹是管理图片资源的，Xcode7.0以后默认生成Assets.xcassets文件夹，用来管理Image Set、Data Set以及Sprite Atlas，看来以前使用自己创建的文件夹方式管理图片的同学要尽快迁移到Assets下，迁移的方式也很简单，\n选中工程中的Images.xcassets文件夹，然后选中文件目录树下方的\"+\"，然后选择\"Import From Project\"，这是Xcode已经自动把工程中的全部图片选中。\n\n###编译\n\n- Xcode在编译运行的时候能够自动根据当前选中设备（模拟器或者真机都可以）选择适合设备的资源\n- 如果不想使用App-Thinning，可以在build setting中Asset Catalog Compiler中更改Enable_Building_Only_Active_Resources这个选项，默认设置是YES\n- 速度提升，因为运行的时候，只会把适合当前设备的资源文件进行拷贝，以前是一股脑的都拷贝了\n\n###提交\n\n- 如果是提交到AppStore，和以往一样提交就行\n- Ad-hoc/Enterprise Distribution可以根据设备导出对应的ipa文件\n- 企业证书通过Over-the-Air安装，也就是采用itms-service协议直接通过浏览器安装的时候，需要勾选\"Include manifest for over-the-air installation\"选项，这样不同的设备会自动对应到适应的安装包\n\n\n \n\n\n![](/assets/2015/ad-hoc-app-thinning.jpg)\n\n\n\n\n\n\n\n##总结\n应该说给App瘦身这件事是近几年呼声挺高的一件事，而今年在Xcode7上苹果加入了这个功能，并且可以让开发者以极其小的付出就可以拥抱这次变化，可谓大快人心！\n\n","source":"_posts/2015-7-4-WWDC-2015-APP-Thinning.md","raw":"---\nlayout: post\ntitle:  \"WWDC2015 Session笔记-App Thinning\"\ndate:   2015-07-04 22:45:36\ncategories: jekyll update\ntags:\n  - WWDC\n---\n\n本文是我依据 WWDC15 Session Video 写的一篇笔记，涉及的 Session 有\n\n-[App Thinning in Xcode](https://developer.apple.com/videos/wwdc/2015/?id=404)\n\n##重要\n- 苹果指出，使用App-Thinning的前提是使用Asset Catalog管理资源文件\n- 在苹果的演示中，一个约74M的应用程序经过Thinning后变为约22M，效果还是很惊人的\n\n##我们需要了解的\n- 如何使应用程序的体积变得越小\n- 开发和提交应用程序的时候需要做些什么以使App-Thinning生效\n\n\n##Work Flow\n\n###创建\n\n苹果说明必须使用Asset Catalog管理资源文件才可以使App-Thinning生效，Xcode7.0以前新建的默认工程里面有Images.xcassets这个文件夹是管理图片资源的，Xcode7.0以后默认生成Assets.xcassets文件夹，用来管理Image Set、Data Set以及Sprite Atlas，看来以前使用自己创建的文件夹方式管理图片的同学要尽快迁移到Assets下，迁移的方式也很简单，\n选中工程中的Images.xcassets文件夹，然后选中文件目录树下方的\"+\"，然后选择\"Import From Project\"，这是Xcode已经自动把工程中的全部图片选中。\n\n###编译\n\n- Xcode在编译运行的时候能够自动根据当前选中设备（模拟器或者真机都可以）选择适合设备的资源\n- 如果不想使用App-Thinning，可以在build setting中Asset Catalog Compiler中更改Enable_Building_Only_Active_Resources这个选项，默认设置是YES\n- 速度提升，因为运行的时候，只会把适合当前设备的资源文件进行拷贝，以前是一股脑的都拷贝了\n\n###提交\n\n- 如果是提交到AppStore，和以往一样提交就行\n- Ad-hoc/Enterprise Distribution可以根据设备导出对应的ipa文件\n- 企业证书通过Over-the-Air安装，也就是采用itms-service协议直接通过浏览器安装的时候，需要勾选\"Include manifest for over-the-air installation\"选项，这样不同的设备会自动对应到适应的安装包\n\n\n \n\n\n![](/assets/2015/ad-hoc-app-thinning.jpg)\n\n\n\n\n\n\n\n##总结\n应该说给App瘦身这件事是近几年呼声挺高的一件事，而今年在Xcode7上苹果加入了这个功能，并且可以让开发者以极其小的付出就可以拥抱这次变化，可谓大快人心！\n\n","slug":"2015-7-4-WWDC-2015-APP-Thinning","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8of000y3js6rimwi4vg"},{"layout":"post","title":"折腾自己的服务器系列（二）之解析域名到服务器","date":"2015-08-01T10:58:33.000Z","_content":"\n生命不息，折腾不止。此次系列主要记录怎么将自己的域名解析到服务器上。当然，首先，你需要一个域名。这里吐槽下阿里云，我是因为买域名送了买服务器的优惠券才选择购买的阿里云，到头来我要将自己的域名解析到阿里云的时候，阿里云又需要备案域名才可以解析，我购买的服务器的期限是1个月，估计备案域名的时间也需要这么长时间，意味着备案成功后，我的服务器也到期了。那我还解析个毛啊，果断退了阿里云服务器，购买了香港的vps。\n\n解析域名，当然首推[Dnspod](https://www.dnspod.cn/). 注册也挺方便，直接使用QQ扫描登陆授权就可以了。\n\n首先需要添加一条域名记录，默认新添加一条记录后是这个样子：\n\n![](/assets/2015/img_prepaer_vps1.png)\n\n需要把红线框住的两条`NS记录`提交到域名提供商那里。因为我的域名是从万网买的，所以要登陆阿里云，点击“修改DNS”，将DNS记录修改为Dnspod提供的那两条记录\n\n![](/assets/2015/img_prepaer_vps2.png)\n\n至此，以后所有域名的操作都可以在Dnspod上搞定了，跟阿里云没有关系了。\n\n接下来就折腾下怎么把主域名解析到服务器www目录，以及解析一个二级域名到服务器自定义的一个目录。\n\n##解析主域名\n当我们需要将域名解析到我们服务器的公网ip的时候，就需要在Dnspod上添加记录，如图：\n\n![](/assets/2015/img_prepaer_vps3.png)\n\n可以看出，我们在刚才的基础上添加了两条`A记录`。A记录的意思是把域名解析到一个ip地址，是符合我们当下的需求的。\n\n在主机记录栏，分别添加了`@`和`www`两条，分别对应的意思是：\n\n\t// 假设域名是bbbb\n\t@ ： 通过浏览器访问 bbbb.com 会跳转到服务器\n\twww ：通过浏览器访问 www.bbbb.com 会跳转到服务器\n\t\n在记录值栏，要添加成服务器的公网ip，假如你的服务器的公网ip是`100.200.160.70`, 就填这个地址就可以。\n\n现在，等dns解析生效，在浏览器中访问自己的域名，应该可以跳转到服务器了。\n\n##解析二级域名\n假设主域名是bbbb.com, 二级域名是类似`wx.bbbb.com`这种。现在的需求是把二级域名也解析到服务器上。还是需要添加记录：\n\n![](/assets/2015/img_prepaer_vps4.png)\n\n还是一条`A记录`，因为我们需要先把二级域名解析到服务器上，然后在服务器的Apache设置跳转规则，将二级域名跳转到指定目录。\n\n在主机记录栏，添加了`wx`，意思是：\n\n\t// 假设域名是bbbb\n\twx ： 通过浏览器访问 wx.bbbb.com 会跳转到服务器\n\t\n在记录值那里还是填服务器的公网ip。\n现在等dns解析生效，访问`wx.bbbb.com`就会跳转到服务器www目录了。显然这不是我们想要的结果。\n\n需要指向指定目录，还要更改下Apache的配置：\n\n\tvi /etc/httpd/conf/httpd.conf\n\t\n在配置文件末尾添加如下代码：\n\n\tRewriteEngine on\n\tRewriteMap lowercase int:tolower\n\tRewriteMap vhost txt:/etc/httpd/conf/vhost.map\n\tRewriteCond ${lowercase:%{SERVER_NAME}} ^(.+)$\n\tRewriteCond ${vhost:%1} ^(/.*)$\n\tRewriteRule ^/(.*)$ %1/$1\n\n目的是告诉Apache，我们有一个`vhost.map`文件，通过这个文件来定义连接到服务器的二级域名该跳转到哪个目录。\n\n接下来创建在`/etc/httpd/conf`这个目录下创建这个文件：\n\n\tvi vhost.map\n\t// 这个文件下添加下面的记录\n\twx.bbbb.com /var/www/html/bbbb.com/wx\n\t\n通过这个文件，Apache会把`wx.bbbb.com`这个域名解析到我们设置的那个目录去。以后的二级域名跳转规则都可以添加到这个文件下，并且不需要重启Apache服务就可以使之生效。\n\n现在，通过浏览器访问`wx.bbbb.com`就可以跳转到我们刚才设置的那个目录了。\n\n##最后\n折腾服务器的这个系列就要先告一段落了，因为刚开始接触这些东西，有些东西并不是很深入，人生路漫漫，以后还要接着折腾。\n\n\n\n\t\n","source":"_posts/2015-7-26-prepare-my-own-vps2.md","raw":"---\nlayout: post\ntitle:  \"折腾自己的服务器系列（二）之解析域名到服务器\"\ndate:   2015-08-01 18:58:33\ntags:\n  - Linux\n---\n\n生命不息，折腾不止。此次系列主要记录怎么将自己的域名解析到服务器上。当然，首先，你需要一个域名。这里吐槽下阿里云，我是因为买域名送了买服务器的优惠券才选择购买的阿里云，到头来我要将自己的域名解析到阿里云的时候，阿里云又需要备案域名才可以解析，我购买的服务器的期限是1个月，估计备案域名的时间也需要这么长时间，意味着备案成功后，我的服务器也到期了。那我还解析个毛啊，果断退了阿里云服务器，购买了香港的vps。\n\n解析域名，当然首推[Dnspod](https://www.dnspod.cn/). 注册也挺方便，直接使用QQ扫描登陆授权就可以了。\n\n首先需要添加一条域名记录，默认新添加一条记录后是这个样子：\n\n![](/assets/2015/img_prepaer_vps1.png)\n\n需要把红线框住的两条`NS记录`提交到域名提供商那里。因为我的域名是从万网买的，所以要登陆阿里云，点击“修改DNS”，将DNS记录修改为Dnspod提供的那两条记录\n\n![](/assets/2015/img_prepaer_vps2.png)\n\n至此，以后所有域名的操作都可以在Dnspod上搞定了，跟阿里云没有关系了。\n\n接下来就折腾下怎么把主域名解析到服务器www目录，以及解析一个二级域名到服务器自定义的一个目录。\n\n##解析主域名\n当我们需要将域名解析到我们服务器的公网ip的时候，就需要在Dnspod上添加记录，如图：\n\n![](/assets/2015/img_prepaer_vps3.png)\n\n可以看出，我们在刚才的基础上添加了两条`A记录`。A记录的意思是把域名解析到一个ip地址，是符合我们当下的需求的。\n\n在主机记录栏，分别添加了`@`和`www`两条，分别对应的意思是：\n\n\t// 假设域名是bbbb\n\t@ ： 通过浏览器访问 bbbb.com 会跳转到服务器\n\twww ：通过浏览器访问 www.bbbb.com 会跳转到服务器\n\t\n在记录值栏，要添加成服务器的公网ip，假如你的服务器的公网ip是`100.200.160.70`, 就填这个地址就可以。\n\n现在，等dns解析生效，在浏览器中访问自己的域名，应该可以跳转到服务器了。\n\n##解析二级域名\n假设主域名是bbbb.com, 二级域名是类似`wx.bbbb.com`这种。现在的需求是把二级域名也解析到服务器上。还是需要添加记录：\n\n![](/assets/2015/img_prepaer_vps4.png)\n\n还是一条`A记录`，因为我们需要先把二级域名解析到服务器上，然后在服务器的Apache设置跳转规则，将二级域名跳转到指定目录。\n\n在主机记录栏，添加了`wx`，意思是：\n\n\t// 假设域名是bbbb\n\twx ： 通过浏览器访问 wx.bbbb.com 会跳转到服务器\n\t\n在记录值那里还是填服务器的公网ip。\n现在等dns解析生效，访问`wx.bbbb.com`就会跳转到服务器www目录了。显然这不是我们想要的结果。\n\n需要指向指定目录，还要更改下Apache的配置：\n\n\tvi /etc/httpd/conf/httpd.conf\n\t\n在配置文件末尾添加如下代码：\n\n\tRewriteEngine on\n\tRewriteMap lowercase int:tolower\n\tRewriteMap vhost txt:/etc/httpd/conf/vhost.map\n\tRewriteCond ${lowercase:%{SERVER_NAME}} ^(.+)$\n\tRewriteCond ${vhost:%1} ^(/.*)$\n\tRewriteRule ^/(.*)$ %1/$1\n\n目的是告诉Apache，我们有一个`vhost.map`文件，通过这个文件来定义连接到服务器的二级域名该跳转到哪个目录。\n\n接下来创建在`/etc/httpd/conf`这个目录下创建这个文件：\n\n\tvi vhost.map\n\t// 这个文件下添加下面的记录\n\twx.bbbb.com /var/www/html/bbbb.com/wx\n\t\n通过这个文件，Apache会把`wx.bbbb.com`这个域名解析到我们设置的那个目录去。以后的二级域名跳转规则都可以添加到这个文件下，并且不需要重启Apache服务就可以使之生效。\n\n现在，通过浏览器访问`wx.bbbb.com`就可以跳转到我们刚才设置的那个目录了。\n\n##最后\n折腾服务器的这个系列就要先告一段落了，因为刚开始接触这些东西，有些东西并不是很深入，人生路漫漫，以后还要接着折腾。\n\n\n\n\t\n","slug":"2015-7-26-prepare-my-own-vps2","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8oh00123js6mimwlruw"},{"layout":"post","title":"折腾自己的服务器系列（一）之配置服务器","date":"2015-07-26T03:13:36.000Z","_content":"\n生命不息，折腾不止。为了消灭自己的懒惰情绪，增强匮乏感，也正值阿里云服务器打折，遂买了个服务器折腾一下。在这个过程中所遇到的所有问题、难点等均可在网路上找到相关资料，之所以还再写这个系列，一是记录下这个过程，方便以后查询；二是因为网路中很多资料都已过时，故整理出最新可用的资料供需要的人查询。\n\nSo，这个系列大概要做这些事情：\n\n- 配置服务器：包括Apache，PHP，MYSQL，FTP，PhpMyAdmin等\n- 配置域名：将自己的域名指向服务器，以及设置二级域名等。\n\n今天这个系列主要就是记录写如何配置刚购买的服务器。\n这里需要说明的是，以下的操作都是基于CentOS6.4版本。\n\n##安装基本的软件服务\n首先通过远程登录，连接到服务器，因为我用的是Mac，所以直接用ssh命令登录：\n\n\tssh ip地址 -l root \n\t\n\nCentOS下推荐适用yum安装软件，故通过下列命令安装我们所需的服务：\n\t\n\t// 安装Apache服务\n\tyum install -y httpd\n\t// 安装PHP\n\tyum install -y php\n\t// 安装MYSQL\n\tyum install -y mysql-server mysql\n\t// 安装sftp\n\tyum install -y vsftpd \n\t\n至此，基本的服务都已安装，不得不感叹Linux作为服务器来说，确实比MAC和Windows有优势，安装太方便了。接下来的就是配置下这些服务，让他们运行起来。\n\n##配置Apache\n我们需要修改两个地方，修改配置文件以及在网站根目录创建index.html.\n\t\n\t// 下面这个目录是配置文件所在目录\n\tvi /etc/httpd/conf/httpd.conf\n找到 `#ServerName www.example.com:80`将注释关闭，变成类似这样的`ServerName 服务器的公网ip:80`。\n\n\t// 下面这个目录是Apache默认的网站目录\n\tcd /var/www/html\n\ttouch index.html\n\t\n创建`index.html`后，往里面随便写点东西。\n现在在本地浏览器中访问服务器的公网ip，应该就可以看到刚才我们在`index.html`中输入的内容了。\n需要注意的是阿里云服务器默认是开放**80**端口的，通过这个命令`service iptables status`查看当前防火墙状态:\n\n\tservice iptables status\n\t表格：filter\n\tChain INPUT (policy ACCEPT)\n\tnum  target    prot opt source            destination         \n\t1    ACCEPT    tcp  --  0.0.0.0/0         0.0.0.0/0    tcp dpt:22 \n\t2    ACCEPT    tcp  --  0.0.0.0/0         0.0.0.0/0    tcp dpt:80\n\t\n可以看到当前服务器已经开放了**80**端口和**22**端口。\n如果服务器默认没有开放**80**端口，还需要开放**80**端口，可以这样：\n\t\n\t// 开放80端口 \n\tiptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT\n\t// 因为要使用sftp，顺便也开放22端口\n\tiptables -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT\n\t// 保存\n\tservice iptables save\n\n至此，Apache的设置就完成了。\n\n##配置SFTP\n默认的，和Apache一样，sftp的配置文件在这个目录`/etc//vsftpd/`下。sftp默认是不允许root用户登录的，因为是我自己的服务器，并不需要别人参与开发，所以就简单的设置下如何配置root用户可以登录（需要说明的是开启root用户会很不安全，因为root用户的权限太大）：\n\n\t// ftpusers中的用户是黑名单用户是不允许从sftp登录的 \n\tvi /etc/vsftpd/ftpusers // 把列表中的root注释\n\t// sftp默认开启userlist_deny，会阻止user_list中的用户\n\tvi /etc/vsftpd/user_list //  把列表中的root注释\n\t \n\t\n现在尝试在客户端通过sftp连接服务器吧。对于Mac电脑，推荐这个软件[Filezilla](https://filezilla-project.org/download.php?type=client)，或者给Sublime装个插件，都可以连上服务器了。\n\n##配置MySQL\n之前的这个步骤`yum install -y mysql-server mysql`已经安装了MySQL所需的软件服务。要运行MySQL服务，需要这些命令：\n\t\n\t// 启动mysqld服务 要关闭的话将start替换成stop\n\tservice mysqld start\n\t// 给root用户设置密码为ab123 默认刚安装的数据库是没有密码的，所以需要先设置密码\n\tmysqladmin -uroot -password ab123\n\t// 连接数据库\n\tmysql -uroot -p\n\t// 提示输入密码后，就可进入mysql命令模式了\n\t// 推出mysql命令模式\n\t// exit\n\t\n关于数据库的管理，还是推荐使用phpMyAdmin更加方便些。关于phpmyadmin，可以选择yum安装，也可以直接从[官网](http://www.phpmyadmin.net/downloads/)下载。\n今天的系列就先到这了，下一系列说说配置域名的事情。\n\n\n\n\n\n\n","source":"_posts/2015-7-26-prepare-my-own-vps1.md","raw":"---\nlayout: post\ntitle:  \"折腾自己的服务器系列（一）之配置服务器\"\ndate:   2015-07-26 11:13:36\ncategories: jekyll update\ntags:\n  - Linux\n---\n\n生命不息，折腾不止。为了消灭自己的懒惰情绪，增强匮乏感，也正值阿里云服务器打折，遂买了个服务器折腾一下。在这个过程中所遇到的所有问题、难点等均可在网路上找到相关资料，之所以还再写这个系列，一是记录下这个过程，方便以后查询；二是因为网路中很多资料都已过时，故整理出最新可用的资料供需要的人查询。\n\nSo，这个系列大概要做这些事情：\n\n- 配置服务器：包括Apache，PHP，MYSQL，FTP，PhpMyAdmin等\n- 配置域名：将自己的域名指向服务器，以及设置二级域名等。\n\n今天这个系列主要就是记录写如何配置刚购买的服务器。\n这里需要说明的是，以下的操作都是基于CentOS6.4版本。\n\n##安装基本的软件服务\n首先通过远程登录，连接到服务器，因为我用的是Mac，所以直接用ssh命令登录：\n\n\tssh ip地址 -l root \n\t\n\nCentOS下推荐适用yum安装软件，故通过下列命令安装我们所需的服务：\n\t\n\t// 安装Apache服务\n\tyum install -y httpd\n\t// 安装PHP\n\tyum install -y php\n\t// 安装MYSQL\n\tyum install -y mysql-server mysql\n\t// 安装sftp\n\tyum install -y vsftpd \n\t\n至此，基本的服务都已安装，不得不感叹Linux作为服务器来说，确实比MAC和Windows有优势，安装太方便了。接下来的就是配置下这些服务，让他们运行起来。\n\n##配置Apache\n我们需要修改两个地方，修改配置文件以及在网站根目录创建index.html.\n\t\n\t// 下面这个目录是配置文件所在目录\n\tvi /etc/httpd/conf/httpd.conf\n找到 `#ServerName www.example.com:80`将注释关闭，变成类似这样的`ServerName 服务器的公网ip:80`。\n\n\t// 下面这个目录是Apache默认的网站目录\n\tcd /var/www/html\n\ttouch index.html\n\t\n创建`index.html`后，往里面随便写点东西。\n现在在本地浏览器中访问服务器的公网ip，应该就可以看到刚才我们在`index.html`中输入的内容了。\n需要注意的是阿里云服务器默认是开放**80**端口的，通过这个命令`service iptables status`查看当前防火墙状态:\n\n\tservice iptables status\n\t表格：filter\n\tChain INPUT (policy ACCEPT)\n\tnum  target    prot opt source            destination         \n\t1    ACCEPT    tcp  --  0.0.0.0/0         0.0.0.0/0    tcp dpt:22 \n\t2    ACCEPT    tcp  --  0.0.0.0/0         0.0.0.0/0    tcp dpt:80\n\t\n可以看到当前服务器已经开放了**80**端口和**22**端口。\n如果服务器默认没有开放**80**端口，还需要开放**80**端口，可以这样：\n\t\n\t// 开放80端口 \n\tiptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT\n\t// 因为要使用sftp，顺便也开放22端口\n\tiptables -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT\n\t// 保存\n\tservice iptables save\n\n至此，Apache的设置就完成了。\n\n##配置SFTP\n默认的，和Apache一样，sftp的配置文件在这个目录`/etc//vsftpd/`下。sftp默认是不允许root用户登录的，因为是我自己的服务器，并不需要别人参与开发，所以就简单的设置下如何配置root用户可以登录（需要说明的是开启root用户会很不安全，因为root用户的权限太大）：\n\n\t// ftpusers中的用户是黑名单用户是不允许从sftp登录的 \n\tvi /etc/vsftpd/ftpusers // 把列表中的root注释\n\t// sftp默认开启userlist_deny，会阻止user_list中的用户\n\tvi /etc/vsftpd/user_list //  把列表中的root注释\n\t \n\t\n现在尝试在客户端通过sftp连接服务器吧。对于Mac电脑，推荐这个软件[Filezilla](https://filezilla-project.org/download.php?type=client)，或者给Sublime装个插件，都可以连上服务器了。\n\n##配置MySQL\n之前的这个步骤`yum install -y mysql-server mysql`已经安装了MySQL所需的软件服务。要运行MySQL服务，需要这些命令：\n\t\n\t// 启动mysqld服务 要关闭的话将start替换成stop\n\tservice mysqld start\n\t// 给root用户设置密码为ab123 默认刚安装的数据库是没有密码的，所以需要先设置密码\n\tmysqladmin -uroot -password ab123\n\t// 连接数据库\n\tmysql -uroot -p\n\t// 提示输入密码后，就可进入mysql命令模式了\n\t// 推出mysql命令模式\n\t// exit\n\t\n关于数据库的管理，还是推荐使用phpMyAdmin更加方便些。关于phpmyadmin，可以选择yum安装，也可以直接从[官网](http://www.phpmyadmin.net/downloads/)下载。\n今天的系列就先到这了，下一系列说说配置域名的事情。\n\n\n\n\n\n\n","slug":"2015-7-26-prepare-my-own-vps1","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8oj00143js6vpobaw8j"},{"layout":"post","title":"iOS进阶读书笔记","date":"2015-07-02T14:45:36.000Z","_content":"\n最近读了下[唐巧](www.devtang.com)写的《iOS进阶》， 补全了很多iOS开发的盲点，总结下自己在开发过程中认知不足的地方。\n\n- GET请求(为何涉及加密传输比如登陆注册不可以用GET请求):GET请求会在浏览器地址栏暴漏网址，然而在客户端不存在这个问题，所以可能有人觉得用不用GET都无所谓，现在知道GET请求会出现在服务器的access log，这是相当危险的。\n- \n","source":"_posts/2015-7-2-readNotes-about-iOSPro.md","raw":"---\nlayout: post\ntitle:  \"iOS进阶读书笔记\"\ndate:   2015-07-02 22:45:36\ncategories: jekyll update\n---\n\n最近读了下[唐巧](www.devtang.com)写的《iOS进阶》， 补全了很多iOS开发的盲点，总结下自己在开发过程中认知不足的地方。\n\n- GET请求(为何涉及加密传输比如登陆注册不可以用GET请求):GET请求会在浏览器地址栏暴漏网址，然而在客户端不存在这个问题，所以可能有人觉得用不用GET都无所谓，现在知道GET请求会出现在服务器的access log，这是相当危险的。\n- \n","slug":"2015-7-2-readNotes-about-iOSPro","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8ol00173js66yfmsre3"},{"layout":"post","title":"Apple Watch开发系列（一）","date":"2015-07-16T14:52:36.000Z","_content":"\n本系列是我依据WWDC15 Session Video以及苹果官方文档写的一个小Demo，涉及的资料有\n\n-[Building Watch Apps](https://developer.apple.com/videos/wwdc/2015/?id=108)\n\n-[AppleWatch2 Transition Guide](https://developer.apple.com/library/prerelease/watchos/documentation/General/Conceptual/AppleWatch2TransitionGuide/index.html)\n\n-[WatchKit Programming Guide](https://developer.apple.com/library/prerelease/watchos/documentation/General/Conceptual/WatchKitProgrammingGuide/index.html)\n\n另外需要说明的是本Demo是基于Watch OS 2.0开发的，因为我开始学的时候已经是2.0了，哈哈。在该系列的每篇文章末尾会有一个链接地址，指向这个Demo。\n\n#前言\n当然，首先我们要有一个iOS app，因为WatchKit app的bundle是集成与iOS app中的，安装Watch app的时候会把WatchKit app的bundle从iPhone中传输到Watch上。而对于Watch app来说，分为两个部分：WatchKit app(运行在Apple Watch)以及WatchKit extension(运行在iPhone上)。WatchKit app只包含程序UI相关的storyboards和资源文件（比如图片等），而WatchKit extension包含管理和响应UI的代码。\n#添加Watch app Target\n\n和添加一个iOS app target一样的步骤，如果我要添加了一个名为“Watch”的Target，顺序是下面这样的：\n![](/assets/2015/img-watchdemo-1.png)\n\n选择Next以后，需要勾选这些东西：\n![](/assets/2015/img-watchdemo-2.png)\n分别解释下这几个选项\n\n- Notification Scene 通知中心：应用程序收到远程或本地通知的时候，手表界面出现的通知布景。\n- Glacne 速览。从表盘界面上拉出现的界面，添加到速览列表后，用户可以通过左右滑动速览界面，看到程序提供的速览界面，提供最重要的信息，不可滚动的，一屏，不可包含可交互元素，点击会启动WatchKit app\n- Complication 特殊功能（或者叫功能栏）：抬起手腕可以在表盘上看见的东西，比如我的表盘上自定义的功能栏有日历、健身活动、定时器等。\n\n这些按需要勾选，确定以后，在WatchKit app的storyboard中就可以看到以下界面：\n![](/assets/2015/img-watchdemo-3.png)\n图中的Main interface就是Watchkit app的主界面了，Glance Interface是速览界面，剩下的Static Interface和Dynamic Interface是连着一起的，可以这样解释：当Watch上收到iPhone的通知的时候，首先会调起程序对应的Static Interface，当用户对通知表示有兴趣，也就是说抬起了手腕想看这条通知的时候，会切换到对应的Dynamic Interface上。\n\n此次，我们的任务就是把这几个Interface都运行起来，在Watch上看到效果。\n#添加界面元素\n暂时，我们可以先在各个界面上拖上一些简单的元素。这里需要注意的是Glance Interface上是不允许可交互元素（比如button，switch等）的存在的。\n#编译运行\n到现在为止，查看Scheme menu可以看到，Xcode已经为我们生成了调试不同界面的Scheme了。要编译运行main Interface我们选中Watch Scheme，就可以在模拟器上看到我们的main Interface了。\nGlance和Notification Interface稍微还要费电周折，分别讲一下：\n\n- Glance\n\n要选择iOS app的target对应的Scheme，编译运行，在iPhone的“Watch”应用中，进入我们新建的iOS app设置界面，选中“Show In Glance”（在速览中显示）。然后回到Watch模拟器，从表盘界面往上滑动，再往右滑动，就可以看到我们创建的速览界面了。\n\n- Notification Scene\n\n在工程的“Edit Scheme”中，选择编辑“Notification-Watch”:\n![]( /assets/2015/img-watchdemo-4.png)\n有两个地方需要注意：\n\n1. Watch Interface 可以切换Static Notification和Dynamic Notification来分别调试不同场景下的通知视图。当然可以通过左下角的Duplicate Scheme来复制一个Scheme，这样就分别有了Static Notification和Dynamic Notification对应的Scheme了。\n2. Notification Payload 在Watch Extension文件夹下的Support Fils下有一个名为“PushNotificationPayload.apns”的文件。这个文件是Xcode为我们自动生成的，因为模拟器不支持推送，所以通过这个文件模拟一个推送。我们可以修改这个文件的内容，以及创建新的payload文件，然后再来调试我们的程序。\n\n现在我们选中Static Notification的Scheme来编译运行，就可以看到模拟器上收到的通知内容为“Test Message”，而这个文字是从PushNotificationPayload.apns这个文件中读写出来的。\n\n然后再选中Dynamic Notification的Scheme来编译运行，发现怎么还是刚才的通知，现在我们要移步到NotificationController.m这个文件下，将一下代码的注释打开\n\n\n\n``` Objective-C\n- (void)didReceiveRemoteNotification:(NSDictionary *)remoteNotification withCompletion:(void (^)(WKUserNotificationInterfaceType))completionHandler {\n    // This method is called when a remote notification needs to be presented.\n    // Implement it if you use a dynamic notification interface.\n    // Populate your dynamic notification interface as quickly as possible.\n    //\n    // After populating your dynamic notification interface call the completion block.\n    completionHandler(WKUserNotificationInterfaceTypeDefault);\n}\n``` \n\n然后我们需要把下面这行代码中的\"WKUserNotificationInterfaceTypeDefault\"替换为\"WKUserNotificationInterfaceTypeCustom\"，然后重新编译运行，就发现我们定制的Dynamic Notification出现在屏幕上了。\n\t    \t\t\t\n\tcompletionHandler(WKUserNotificationInterfaceTypeDefault);\n\n\n#下期预告\n今天的系列就先到这里，下一系列讲讲怎么创建一个功能栏，就是抬腕可以在表盘上看见的那个东西。\n\n- 惯例：[点击这里下载Demo](https://github.com/red3/WatchDemo/archive/master.zip)\n- 重要：因为博客暂时没有评论区，如果你对本文有什么疑惑，或者你发现本文由存在错误的地方，非常欢迎你联系我指出。QQ：309333018，WeiChat：flipgo\n\n\n\n\n\n\n\n\n","source":"_posts/2015-7-16-Apple-Watch-Demo-1.md","raw":"---\nlayout: post\ntitle:  \"Apple Watch开发系列（一）\"\ndate:   2015-07-16 22:52:36\ncategories: jekyll update\ntags:\n  - Apple Watch\n  - WWDC\n---\n\n本系列是我依据WWDC15 Session Video以及苹果官方文档写的一个小Demo，涉及的资料有\n\n-[Building Watch Apps](https://developer.apple.com/videos/wwdc/2015/?id=108)\n\n-[AppleWatch2 Transition Guide](https://developer.apple.com/library/prerelease/watchos/documentation/General/Conceptual/AppleWatch2TransitionGuide/index.html)\n\n-[WatchKit Programming Guide](https://developer.apple.com/library/prerelease/watchos/documentation/General/Conceptual/WatchKitProgrammingGuide/index.html)\n\n另外需要说明的是本Demo是基于Watch OS 2.0开发的，因为我开始学的时候已经是2.0了，哈哈。在该系列的每篇文章末尾会有一个链接地址，指向这个Demo。\n\n#前言\n当然，首先我们要有一个iOS app，因为WatchKit app的bundle是集成与iOS app中的，安装Watch app的时候会把WatchKit app的bundle从iPhone中传输到Watch上。而对于Watch app来说，分为两个部分：WatchKit app(运行在Apple Watch)以及WatchKit extension(运行在iPhone上)。WatchKit app只包含程序UI相关的storyboards和资源文件（比如图片等），而WatchKit extension包含管理和响应UI的代码。\n#添加Watch app Target\n\n和添加一个iOS app target一样的步骤，如果我要添加了一个名为“Watch”的Target，顺序是下面这样的：\n![](/assets/2015/img-watchdemo-1.png)\n\n选择Next以后，需要勾选这些东西：\n![](/assets/2015/img-watchdemo-2.png)\n分别解释下这几个选项\n\n- Notification Scene 通知中心：应用程序收到远程或本地通知的时候，手表界面出现的通知布景。\n- Glacne 速览。从表盘界面上拉出现的界面，添加到速览列表后，用户可以通过左右滑动速览界面，看到程序提供的速览界面，提供最重要的信息，不可滚动的，一屏，不可包含可交互元素，点击会启动WatchKit app\n- Complication 特殊功能（或者叫功能栏）：抬起手腕可以在表盘上看见的东西，比如我的表盘上自定义的功能栏有日历、健身活动、定时器等。\n\n这些按需要勾选，确定以后，在WatchKit app的storyboard中就可以看到以下界面：\n![](/assets/2015/img-watchdemo-3.png)\n图中的Main interface就是Watchkit app的主界面了，Glance Interface是速览界面，剩下的Static Interface和Dynamic Interface是连着一起的，可以这样解释：当Watch上收到iPhone的通知的时候，首先会调起程序对应的Static Interface，当用户对通知表示有兴趣，也就是说抬起了手腕想看这条通知的时候，会切换到对应的Dynamic Interface上。\n\n此次，我们的任务就是把这几个Interface都运行起来，在Watch上看到效果。\n#添加界面元素\n暂时，我们可以先在各个界面上拖上一些简单的元素。这里需要注意的是Glance Interface上是不允许可交互元素（比如button，switch等）的存在的。\n#编译运行\n到现在为止，查看Scheme menu可以看到，Xcode已经为我们生成了调试不同界面的Scheme了。要编译运行main Interface我们选中Watch Scheme，就可以在模拟器上看到我们的main Interface了。\nGlance和Notification Interface稍微还要费电周折，分别讲一下：\n\n- Glance\n\n要选择iOS app的target对应的Scheme，编译运行，在iPhone的“Watch”应用中，进入我们新建的iOS app设置界面，选中“Show In Glance”（在速览中显示）。然后回到Watch模拟器，从表盘界面往上滑动，再往右滑动，就可以看到我们创建的速览界面了。\n\n- Notification Scene\n\n在工程的“Edit Scheme”中，选择编辑“Notification-Watch”:\n![]( /assets/2015/img-watchdemo-4.png)\n有两个地方需要注意：\n\n1. Watch Interface 可以切换Static Notification和Dynamic Notification来分别调试不同场景下的通知视图。当然可以通过左下角的Duplicate Scheme来复制一个Scheme，这样就分别有了Static Notification和Dynamic Notification对应的Scheme了。\n2. Notification Payload 在Watch Extension文件夹下的Support Fils下有一个名为“PushNotificationPayload.apns”的文件。这个文件是Xcode为我们自动生成的，因为模拟器不支持推送，所以通过这个文件模拟一个推送。我们可以修改这个文件的内容，以及创建新的payload文件，然后再来调试我们的程序。\n\n现在我们选中Static Notification的Scheme来编译运行，就可以看到模拟器上收到的通知内容为“Test Message”，而这个文字是从PushNotificationPayload.apns这个文件中读写出来的。\n\n然后再选中Dynamic Notification的Scheme来编译运行，发现怎么还是刚才的通知，现在我们要移步到NotificationController.m这个文件下，将一下代码的注释打开\n\n\n\n``` Objective-C\n- (void)didReceiveRemoteNotification:(NSDictionary *)remoteNotification withCompletion:(void (^)(WKUserNotificationInterfaceType))completionHandler {\n    // This method is called when a remote notification needs to be presented.\n    // Implement it if you use a dynamic notification interface.\n    // Populate your dynamic notification interface as quickly as possible.\n    //\n    // After populating your dynamic notification interface call the completion block.\n    completionHandler(WKUserNotificationInterfaceTypeDefault);\n}\n``` \n\n然后我们需要把下面这行代码中的\"WKUserNotificationInterfaceTypeDefault\"替换为\"WKUserNotificationInterfaceTypeCustom\"，然后重新编译运行，就发现我们定制的Dynamic Notification出现在屏幕上了。\n\t    \t\t\t\n\tcompletionHandler(WKUserNotificationInterfaceTypeDefault);\n\n\n#下期预告\n今天的系列就先到这里，下一系列讲讲怎么创建一个功能栏，就是抬腕可以在表盘上看见的那个东西。\n\n- 惯例：[点击这里下载Demo](https://github.com/red3/WatchDemo/archive/master.zip)\n- 重要：因为博客暂时没有评论区，如果你对本文有什么疑惑，或者你发现本文由存在错误的地方，非常欢迎你联系我指出。QQ：309333018，WeiChat：flipgo\n\n\n\n\n\n\n\n\n","slug":"2015-7-16-Apple-Watch-Demo-1","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8oo00193js6n5u8pr4w"},{"layout":"post","title":"为什么我们需要Present这种模态推出视图的方式？","date":"2015-07-11T02:37:36.000Z","_content":"iOS开发者都知道，推出新页面有两种方式，一种是导航Push，另一种是视图本身Present另一个视图。一般的应用程序都是UITabBarController+4个UINavigationController，然后每个导航Push或者Pop就解决了问题。\n\n这次引发我思考的是佳缘经纪人项目中要添加银行卡的一个功能：这个功能有两个入口，第一个入口是从导航栈中的某个视图Push出的（非根视图），第二个入口是从导航的根视图Push出的。这个功能本身又需要分2个步骤，验证手机收到的验证码以及输入银行卡号，是两个页面。这样在成功添加银行卡号后要跳转到发起该请求的页面的时候可以这样：\n- 如果是根视图：PopToRootViewController\n- 如果不是根视图：先找到导航栈中的那个控制器，然后PopToViewController：\n从流程上讲：它应该是这个样子\n\n![](/assets/2015/broker_add_bankCard.png)\n\n那么问题来了，如果哪天这个功能还要有一个入口，在Pop回去的地方就又要多加判断，意味着这个流程里面就有了很多垃圾代码去判断是从哪个页面来的。这个时候我开始考虑，这样的设计可能是存在问题的。\n\n###微信\n\n意识到这个问题的时候，我在想，有类似流程设计的肯定不止一家，其实是可以参考其他软件是怎么设计的。于是花费了时间，看了看微信在类似的场景的设计。下图是微信的更换绑定手机号的流程截图，其实“更换手机号”这个页面是“绑定手机号”这个页面Present出的。\n\n![](/assets/2015/wechat_change_phone.png)\n\n###苹果在iOS框架中的设计\n\n其实苹果自己设计的UIImagePickerController就是一个值得参考的例子。\n它的流程是这样的\n\n![](/assets/2015/ios_imagePicker.png)\n“Photos”这个页面是被Present出的，并且在Xcode中可以看到UIImagePickerController是继承自UINavigationController的。\n\n###因此\n\n可以看出，iOS框架和微信App中，在做这样的操作的时候（这个操作一般可以表述为：需要用户去输入，去选择，去编辑。这个操作一般还涉及好几个步骤，好几个页面），一般用Present的方式模态出一个导航栈出来。而这样做的具体优点为：\n\n- 流程中，用户想放弃编辑，通过导航中的“取消”，可以随时Dismiss这个导航栈，然后回到发起这个功能的页面。而相比直接用导航Push这一系列流程的时候，用户想放弃编辑，只能通过导航中的“返回”一步一步返回了。\n- 用户完成操作的自动跳转，可以通过Dismiss直接回到页面发起的地方。而相比直接用导航Push这一系列流程的方式，要写一堆代码判断到底应该Pop回哪个页面。\n\n所以参照这些，我把红娘经纪人中添加银行卡的步骤设计成类似的流程。同样的，我们添加银行卡的这个流程也有这样一个协议，用来表明是添加银行卡成功了还是取消了这次添加。\n\n\t@protocol UIImagePickerControllerDelegate<NSObject>\n\t@optional\n\t// The picker does not dismiss itself; the client dismisses it in these callbacks.\n\t// The delegate will receive one or the other, but not both, depending whether the user\n\t// confirms or cancels.\n\t- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info;\n\t- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker;\n\t@end\n\n现在回头看微信更换绑定手机的设计，其实也是有点瑕疵的：在“填写验证码”这个环节，缺少“取消”的按钮，如果用户想放弃这次更换手机号的操作，只能先返回到上级界面再点击“取消”了。\n\n###最后说一点\n\n最近读郝培强（tiny4voice）微信公众号中的一篇文章很有感悟，文章最后说：\n\n\t我大家的自主努力，不是坚持，不是在泥潭里坚持，\n\t而是积累，积累改进，积累思考，要跳出泥潭，掌控工作，掌控生活，掌控自己\n\t\n所以我想我们在开发中不要总是一味去照搬以前的方式去蛮干，而要思考，有没有更好的方式。经常的，还要回过头来看看自己写的代码，到底设计得是不是够好，够规范，够易维护。这样才能有所积累。\n\n\n\n","source":"_posts/2015-7-11-why-we-use-present-or-push.md","raw":"---\nlayout: post\ntitle:  \"为什么我们需要Present这种模态推出视图的方式？\"\ndate:   2015-07-11 10:37:36\ncategories: jekyll update\n---\niOS开发者都知道，推出新页面有两种方式，一种是导航Push，另一种是视图本身Present另一个视图。一般的应用程序都是UITabBarController+4个UINavigationController，然后每个导航Push或者Pop就解决了问题。\n\n这次引发我思考的是佳缘经纪人项目中要添加银行卡的一个功能：这个功能有两个入口，第一个入口是从导航栈中的某个视图Push出的（非根视图），第二个入口是从导航的根视图Push出的。这个功能本身又需要分2个步骤，验证手机收到的验证码以及输入银行卡号，是两个页面。这样在成功添加银行卡号后要跳转到发起该请求的页面的时候可以这样：\n- 如果是根视图：PopToRootViewController\n- 如果不是根视图：先找到导航栈中的那个控制器，然后PopToViewController：\n从流程上讲：它应该是这个样子\n\n![](/assets/2015/broker_add_bankCard.png)\n\n那么问题来了，如果哪天这个功能还要有一个入口，在Pop回去的地方就又要多加判断，意味着这个流程里面就有了很多垃圾代码去判断是从哪个页面来的。这个时候我开始考虑，这样的设计可能是存在问题的。\n\n###微信\n\n意识到这个问题的时候，我在想，有类似流程设计的肯定不止一家，其实是可以参考其他软件是怎么设计的。于是花费了时间，看了看微信在类似的场景的设计。下图是微信的更换绑定手机号的流程截图，其实“更换手机号”这个页面是“绑定手机号”这个页面Present出的。\n\n![](/assets/2015/wechat_change_phone.png)\n\n###苹果在iOS框架中的设计\n\n其实苹果自己设计的UIImagePickerController就是一个值得参考的例子。\n它的流程是这样的\n\n![](/assets/2015/ios_imagePicker.png)\n“Photos”这个页面是被Present出的，并且在Xcode中可以看到UIImagePickerController是继承自UINavigationController的。\n\n###因此\n\n可以看出，iOS框架和微信App中，在做这样的操作的时候（这个操作一般可以表述为：需要用户去输入，去选择，去编辑。这个操作一般还涉及好几个步骤，好几个页面），一般用Present的方式模态出一个导航栈出来。而这样做的具体优点为：\n\n- 流程中，用户想放弃编辑，通过导航中的“取消”，可以随时Dismiss这个导航栈，然后回到发起这个功能的页面。而相比直接用导航Push这一系列流程的时候，用户想放弃编辑，只能通过导航中的“返回”一步一步返回了。\n- 用户完成操作的自动跳转，可以通过Dismiss直接回到页面发起的地方。而相比直接用导航Push这一系列流程的方式，要写一堆代码判断到底应该Pop回哪个页面。\n\n所以参照这些，我把红娘经纪人中添加银行卡的步骤设计成类似的流程。同样的，我们添加银行卡的这个流程也有这样一个协议，用来表明是添加银行卡成功了还是取消了这次添加。\n\n\t@protocol UIImagePickerControllerDelegate<NSObject>\n\t@optional\n\t// The picker does not dismiss itself; the client dismisses it in these callbacks.\n\t// The delegate will receive one or the other, but not both, depending whether the user\n\t// confirms or cancels.\n\t- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info;\n\t- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker;\n\t@end\n\n现在回头看微信更换绑定手机的设计，其实也是有点瑕疵的：在“填写验证码”这个环节，缺少“取消”的按钮，如果用户想放弃这次更换手机号的操作，只能先返回到上级界面再点击“取消”了。\n\n###最后说一点\n\n最近读郝培强（tiny4voice）微信公众号中的一篇文章很有感悟，文章最后说：\n\n\t我大家的自主努力，不是坚持，不是在泥潭里坚持，\n\t而是积累，积累改进，积累思考，要跳出泥潭，掌控工作，掌控生活，掌控自己\n\t\n所以我想我们在开发中不要总是一味去照搬以前的方式去蛮干，而要思考，有没有更好的方式。经常的，还要回过头来看看自己写的代码，到底设计得是不是够好，够规范，够易维护。这样才能有所积累。\n\n\n\n","slug":"2015-7-11-why-we-use-present-or-push","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8oq001e3js6feau5rbb"},{"layout":"post","title":"iOS数据持久化的思考","date":"2015-06-24T14:19:36.000Z","_content":"### 缘由\n\n之前做佳缘一对一iOS App的时候，需要解决网络数据做离线缓存，现在红娘经纪人项目考虑用数据库作为缓存解决方案。后来觉得有必要思考下数据持久化该采取的方案。\n\n### 说到数据持久化，到底有哪些方案可以采取\n\n- NSUserDefault\n- NSKeyedArchive\n- Write To File (NSString, NSArray, NSData, NSDictionary)\n- 数据库\n当数据有本地存取的需求的时候，如何保证数据在本地的合理安排？\n\n### 应该采取哪种方案\n\n### 业界是怎么做的\n\n-[YTKKeyValueStore](https://github.com/yuantiku/YTKKeyValueStore)\n\n[唐巧](www.devtang.com)开源的基于sqlite的Key-Value式的存储，猿题库的项目采用该方案。\n\n-[SQLiteManager4iOS](https://github.com/casatwy/SQLiteManager4iOS)\n\n[casatwy](http://casatwy.com/)基于SQLiteMananger这个repo做的迁移方案，解决版本迁移问题。\n\n","source":"_posts/2015-6-24-iOS-save-local-data.md","raw":"---\nlayout: post\ntitle:  \"iOS数据持久化的思考\"\ndate:   2015-06-24 22:19:36\ncategories: jekyll update\n---\n### 缘由\n\n之前做佳缘一对一iOS App的时候，需要解决网络数据做离线缓存，现在红娘经纪人项目考虑用数据库作为缓存解决方案。后来觉得有必要思考下数据持久化该采取的方案。\n\n### 说到数据持久化，到底有哪些方案可以采取\n\n- NSUserDefault\n- NSKeyedArchive\n- Write To File (NSString, NSArray, NSData, NSDictionary)\n- 数据库\n当数据有本地存取的需求的时候，如何保证数据在本地的合理安排？\n\n### 应该采取哪种方案\n\n### 业界是怎么做的\n\n-[YTKKeyValueStore](https://github.com/yuantiku/YTKKeyValueStore)\n\n[唐巧](www.devtang.com)开源的基于sqlite的Key-Value式的存储，猿题库的项目采用该方案。\n\n-[SQLiteManager4iOS](https://github.com/casatwy/SQLiteManager4iOS)\n\n[casatwy](http://casatwy.com/)基于SQLiteMananger这个repo做的迁移方案，解决版本迁移问题。\n\n","slug":"2015-6-24-iOS-save-local-data","published":1,"updated":"2015-09-15T09:50:01.000Z","comments":1,"photos":[],"link":"","_id":"ciep0z8os001g3js6bhxo8m72"}],"PostAsset":[],"PostCategory":[{"post_id":"ciep0z8ll00003js6u8ssp8c4","category_id":"ciep0z8lq00013js6666js4pf","_id":"ciep0z8ls00023js6m7zwradm"},{"post_id":"ciep0z8od000t3js630b8am4v","category_id":"ciep0z8lq00013js6666js4pf","_id":"ciep0z8oe000u3js6qin90w89"},{"post_id":"ciep0z8of000y3js6rimwi4vg","category_id":"ciep0z8lq00013js6666js4pf","_id":"ciep0z8og000z3js6axpj8sxo"},{"post_id":"ciep0z8oj00143js6vpobaw8j","category_id":"ciep0z8lq00013js6666js4pf","_id":"ciep0z8ok00153js6frjs1sz9"},{"post_id":"ciep0z8ol00173js66yfmsre3","category_id":"ciep0z8lq00013js6666js4pf","_id":"ciep0z8on00183js6fmvedwc9"},{"post_id":"ciep0z8oo00193js6n5u8pr4w","category_id":"ciep0z8lq00013js6666js4pf","_id":"ciep0z8oo001a3js6a0dm7fnx"},{"post_id":"ciep0z8oq001e3js6feau5rbb","category_id":"ciep0z8lq00013js6666js4pf","_id":"ciep0z8or001f3js612hlmw1f"},{"post_id":"ciep0z8os001g3js6bhxo8m72","category_id":"ciep0z8lq00013js6666js4pf","_id":"ciep0z8os001h3js6fvrvp882"}],"PostTag":[{"post_id":"ciep0z8nx00053js6lslxq561","tag_id":"ciep0z8ny00063js6ybux0qbx","_id":"ciep0z8nz00093js6g22wp2wq"},{"post_id":"ciep0z8nx00053js6lslxq561","tag_id":"ciep0z8ny00073js6dp1fn3zf","_id":"ciep0z8nz000a3js6nwbq5aoa"},{"post_id":"ciep0z8nx00053js6lslxq561","tag_id":"ciep0z8nz00083js6i5o3f7pg","_id":"ciep0z8nz000b3js6lrnw9tcx"},{"post_id":"ciep0z8o1000c3js66ydm9j7h","tag_id":"ciep0z8ny00063js6ybux0qbx","_id":"ciep0z8o1000d3js61i7nbvpv"},{"post_id":"ciep0z8o1000c3js66ydm9j7h","tag_id":"ciep0z8ny00073js6dp1fn3zf","_id":"ciep0z8o2000e3js6ewhc0x1i"},{"post_id":"ciep0z8o1000c3js66ydm9j7h","tag_id":"ciep0z8nz00083js6i5o3f7pg","_id":"ciep0z8o2000f3js6r1mnmcdi"},{"post_id":"ciep0z8o3000g3js6db3iyjsb","tag_id":"ciep0z8ny00063js6ybux0qbx","_id":"ciep0z8o4000h3js6q9563gds"},{"post_id":"ciep0z8o3000g3js6db3iyjsb","tag_id":"ciep0z8ny00073js6dp1fn3zf","_id":"ciep0z8o4000i3js6q5m682ya"},{"post_id":"ciep0z8o3000g3js6db3iyjsb","tag_id":"ciep0z8nz00083js6i5o3f7pg","_id":"ciep0z8o4000j3js69bsdhp4k"},{"post_id":"ciep0z8o5000k3js67vz81pp1","tag_id":"ciep0z8ny00063js6ybux0qbx","_id":"ciep0z8o6000l3js6pnng1eh5"},{"post_id":"ciep0z8o5000k3js67vz81pp1","tag_id":"ciep0z8ny00073js6dp1fn3zf","_id":"ciep0z8o6000m3js6r9bl34ln"},{"post_id":"ciep0z8o5000k3js67vz81pp1","tag_id":"ciep0z8nz00083js6i5o3f7pg","_id":"ciep0z8o6000n3js6u11x7ist"},{"post_id":"ciep0z8oa000p3js6b2tp5a77","tag_id":"ciep0z8ny00063js6ybux0qbx","_id":"ciep0z8ob000q3js6tag27h03"},{"post_id":"ciep0z8oa000p3js6b2tp5a77","tag_id":"ciep0z8ny00073js6dp1fn3zf","_id":"ciep0z8oc000r3js6sefcj2pq"},{"post_id":"ciep0z8oa000p3js6b2tp5a77","tag_id":"ciep0z8nz00083js6i5o3f7pg","_id":"ciep0z8oc000s3js6dm7cmsvu"},{"post_id":"ciep0z8od000t3js630b8am4v","tag_id":"ciep0z8ny00063js6ybux0qbx","_id":"ciep0z8oe000v3js6eqmtoqtt"},{"post_id":"ciep0z8od000t3js630b8am4v","tag_id":"ciep0z8ny00073js6dp1fn3zf","_id":"ciep0z8oe000w3js6aiqk84zv"},{"post_id":"ciep0z8od000t3js630b8am4v","tag_id":"ciep0z8nz00083js6i5o3f7pg","_id":"ciep0z8oe000x3js64vugd4p5"},{"post_id":"ciep0z8of000y3js6rimwi4vg","tag_id":"ciep0z8og00103js6ikfvlctl","_id":"ciep0z8og00113js6z8fg7f4j"},{"post_id":"ciep0z8oh00123js6mimwlruw","tag_id":"ciep0z8ny00063js6ybux0qbx","_id":"ciep0z8oi00133js66zrwvi59"},{"post_id":"ciep0z8oj00143js6vpobaw8j","tag_id":"ciep0z8ny00063js6ybux0qbx","_id":"ciep0z8ok00163js623rx6rva"},{"post_id":"ciep0z8oo00193js6n5u8pr4w","tag_id":"ciep0z8op001b3js6yi2hfc8e","_id":"ciep0z8op001c3js6f8lgyytg"},{"post_id":"ciep0z8oo00193js6n5u8pr4w","tag_id":"ciep0z8og00103js6ikfvlctl","_id":"ciep0z8op001d3js6nev50stk"}],"Tag":[{"name":"Linux","_id":"ciep0z8ny00063js6ybux0qbx"},{"name":"Scrapy","_id":"ciep0z8ny00073js6dp1fn3zf"},{"name":"Swift","_id":"ciep0z8nz00083js6i5o3f7pg"},{"name":"WWDC","_id":"ciep0z8og00103js6ikfvlctl"},{"name":"Apple Watch","_id":"ciep0z8op001b3js6yi2hfc8e"}]}}