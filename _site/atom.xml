<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>red3 harry</title>
 <link href="/atom.xml" rel="self"/>
 <link href=""/>
 <updated>2015-08-29T11:01:19+08:00</updated>
 <id>/</id>
 <author>
   <name>Harry</name>
 </author>

 
 <entry>
   <title>Scrapy+MySQL+PHP+Swift开发攻略系列（二）爬虫篇</title>
   <link href="/2015/08/29/fullstack-of-Scrapy+MySQL+PHP+Swift2.html"/>
   <updated>2015-08-29T17:09:09+08:00</updated>
   <id>/2015/08/29/fullstack-of-Scrapy+MySQL+PHP+Swift2</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;系列目录&lt;/h2&gt;

&lt;p&gt;你可以从这个地方做一个快速跳转。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.coderharry.com/2015/08/08/fullstack-of-Scrapy+MySQL+PHP+Swift.html&quot;&gt;Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Scrapy+MySQL+PHP+Swift开发攻略系列（二）之爬虫篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Scrapy+MySQL+PHP+Swift开发攻略系列（三）之数据库MySQL篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Scrapy+MySQL+PHP+Swift开发攻略系列（七）之Swift篇&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scrapy&quot;&gt;安装Scrapy&lt;/h2&gt;
&lt;p&gt;爬虫框架我选择用Python写的Scrapy。&lt;/p&gt;

&lt;p&gt;当然准备工作是确保你的Mac安装了&lt;code&gt;commandline&lt;/code&gt;和&lt;code&gt;pip&lt;/code&gt;.
- 安装&lt;code&gt;commandline&lt;/code&gt;可以通过直接安装&lt;code&gt;Xcode&lt;/code&gt;或者在终端运行&lt;code&gt;xcode-select --install&lt;/code&gt;命令安装。
- 安装&lt;code&gt;pip&lt;/code&gt;：遵从官方的这个&lt;a href=&quot;https://pip.pypa.io/en/stable/installing.html#install-pip&quot;&gt;步骤&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后通过&lt;code&gt;pip&lt;/code&gt;安装&lt;code&gt;Scrapy&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo pip install scrapy
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-1&quot;&gt;开始爬虫&lt;/h2&gt;

&lt;p&gt;通过下面这个命令生成一个爬虫工程：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scrapy startproject spiders
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后我们会看到&lt;code&gt;scrapy&lt;/code&gt;已经为我们生成了一个工程。这个工程大概是这个结构&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dbmeizi
|__ __init__.py
|__ items.py
|__ pipelines.py
|__ settings.py
|__ spiders
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面分别解释下各个文件：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;items.py&lt;/code&gt; - item相当于是mvc中的model，在items里我们定义了自己需要的模型
&lt;code&gt;piplines.py&lt;/code&gt; - pipline俗称管道，这个文件主要用来把我们获取的item类型存入MySQL
&lt;code&gt;settings.py&lt;/code&gt; -  在这个文件里面配置整个工程的一些设置。例如MySQL的数据库名，数据库地址和数据库端口号等等。
&lt;code&gt;spiders&lt;/code&gt; - 这个文件夹存放爬虫文件。&lt;/p&gt;

&lt;p&gt;至此，我们就可以正式开始我们的编码工作了。&lt;/p&gt;

&lt;h2 id=&quot;model&quot;&gt;定义Model层&lt;/h2&gt;

&lt;p&gt;首先我们想确定一个网站上的图片包含哪些信息，要解决这个问题，就需要打开这个网页使用&lt;code&gt;开发者工具&lt;/code&gt;, 使用&lt;code&gt;页面选择器&lt;/code&gt;(开发者工作左上角的放大镜图标)选择一张图片，效果如下:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出，我们选中的&lt;code&gt;div&lt;/code&gt;块中包含了我们想要的最基本的资料。这个过程，其实就是我们爬虫的一个工作原理，通过网页元素找到我们想要的内容，只不过现在我们是手动查找，等发现规律，我们就通过爬虫程序自动爬取内容。&lt;/p&gt;

&lt;p&gt;所以item.py里面是这个样子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from scrapy.item import Item, Field

class MeiziItem(Item):

	imgsrc = Field()
	title = Field()
	topic_link = Field()
	star_count = Field()
	update_time = Field()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相当于我们继承自类Item创建了我们自己的MeiziItem，然后我们的自定义类有5个属性，&lt;code&gt;star_count&lt;/code&gt;是设计用来让用户点赞的，最后的&lt;code&gt;update_time &lt;/code&gt;可以用来记录修改时间。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;编写爬虫&lt;/h2&gt;

&lt;p&gt;在&lt;code&gt;spiders&lt;/code&gt;文件夹下新建&lt;code&gt;dbmeizi_scrapy.py&lt;/code&gt;文件。
这个文件里面是这个样子：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scrapy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spider&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scrapy.selector&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Selector&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dbmeizi.items&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MeiziItem&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;dbmeiziSpider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;dbmeiziSpider&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;allowed_domin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dbmeinv.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.dbmeinv.com/?pager_offset=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start_urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strArray&lt;/span&gt;
            
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;divResults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;//div[@class=&amp;quot;img_single&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MeiziItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;.//a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;.//img&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;topic_link&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;@href&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;@title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;imgsrc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;@src&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;star_count&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;update_time&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;需要解释的几点概念：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;allowed_domin &lt;/code&gt; - 指定在哪个网站爬东西&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;start_urls&lt;/code&gt; - 需要爬取哪些页面&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;parse &lt;/code&gt;方法 - 继承自父类，可以想象成这个方法一开始拿到的数据就是整个网页的html代码，我们要通过各种过滤，拿到最终我们感兴趣的内容。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最终，爬虫通过上面的代码爬到我们感兴趣的内容了，通过这些内容为&lt;code&gt;item&lt;/code&gt;赋值，&lt;code&gt;item&lt;/code&gt;会通过管道文件输出，所以接下来我们要创建管道文件。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;定义管道文件&lt;/h2&gt;

&lt;p&gt;打开&lt;code&gt;pipelines.py&lt;/code&gt;，这个文件应该是这个样子：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scrapy.conf&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scrapy.exceptions&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DropItem&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scrapy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PrintPipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;just prit the item&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;                meizi(title, imgsrc, topic_link, star_count, update_time) &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;                values(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;            &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;imgsrc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;topic_link&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;star_count&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;update_time&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;process_item&lt;/code&gt;这个方法中我们暂时只是将item打印输出，看是不是符合我们的数据要求。&lt;/p&gt;

&lt;p&gt;然后到&lt;code&gt;setting.py&lt;/code&gt;这个文件里面加上这么一行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ITEM_PIPELINES = [&#39;dbmeizi.pipelines.PrintPipeline&#39;,] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是指定爬虫爬取后通过&lt;code&gt;PrintPipeline&lt;/code&gt;这个管道输出内容。所以这两个名字要写一致。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;运行爬虫&lt;/h2&gt;
&lt;p&gt;到现在为止，这个爬虫就可以正常工作了。在工程的根目录下执行如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scrapy crawl dbmeiziSpider
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大功告成。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;按照惯例，放上源码地址：&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇</title>
   <link href="/2015/08/09/fullstack-of-Scrapy+MySQL+PHP+Swift.html"/>
   <updated>2015-08-09T06:22:33+08:00</updated>
   <id>/2015/08/09/fullstack-of-Scrapy+MySQL+PHP+Swift</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;系列目录&lt;/h2&gt;

&lt;p&gt;你可以从这个地方做一个快速跳转。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2015/08/09/fullstack-of-Scrapy+MySQL+PHP+Swift.html&quot;&gt;Scrapy+MySQL+PHP+Swift开发攻略系列（一）之前言篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Scrapy+MySQL+PHP+Swift开发攻略系列（二）之爬虫篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Scrapy+MySQL+PHP+Swift开发攻略系列（三）之数据库MySQL篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Scrapy+MySQL+PHP+Swift开发攻略系列（四）之爬虫被封+爬虫自动运行篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Scrapy+MySQL+PHP+Swift开发攻略系列（五）之API篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Scrapy+MySQL+PHP+Swift开发攻略系列（六）之RESTAPI篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Scrapy+MySQL+PHP+Swift开发攻略系列（七）之Swift篇&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;缘由&lt;/h2&gt;

&lt;p&gt;前端时间读到&lt;a href=&quot;http://www.jianshu.com/users/b82d2721ba07/latest_articles&quot;&gt;叶孤城 &lt;/a&gt;的博客，有个系列文档是讲怎么实现从服务端后台到移动端App的整个过程，看了很受触动。真的非常感谢iOS业界有这些经常将自己的技术实践分享出来的前辈，从他们的博客中可以收获很多东西。之所以还要写这个系列，是因为在&lt;a href=&quot;http://www.jianshu.com/users/b82d2721ba07/latest_articles&quot;&gt;叶孤城&lt;/a&gt;的博客文章中，是通过Mongodb数据库将数据存储起来的，在接口层是通过Python实现的。佳缘的后台是通过MySQL+PHP实现的，所以便打算将爬虫里面的Mongodb存储替换成MySQL，在接口层替换Python通过PHP操作MySQL。之前的博客中有提到过，我最近有买了一台服务器，所以顺便学习了将爬虫部署在服务器上，以及爬虫的自动运行等。&lt;/p&gt;

&lt;p&gt;这个系列的文档仅是做为入门的一个实现，毕竟之前也没有做过Python的开发。随着技术的深入了解，我会随时补充一些东西。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;这个系列到底做些什么&lt;/h2&gt;

&lt;p&gt;如文章标题所说，这个系列我主要通过爬虫爬了一家网站的妹子的照片，然后把照片相关信息存储到了MySQL数据库。然后把这个爬虫部署在服务器上（没有服务器的话在自己的电脑上也是可以的，保证电脑长时间是开机状态即可）让爬虫自动运行。这样我们就有了持续不断的内容了。接着在接口层，要开发一个接口，提供给客户端每天的最新照片信息，以及给照片点赞的接口。在客户端层面，要展示一组图片列表，要实现客户端的点赞功能跟服务器的交互。客户端会通过图片的点赞数量，选出当日热门图片。客户端主要会采用Swift编写。&lt;/p&gt;

&lt;p&gt;目前为止，这个项目已经进展到了接口阶段，服务器的数据库上每天都会有新的信息保存进来。接下来的时间，我会把已经完成的部分抽空更新出来。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>折腾自己的服务器系列（二）之解析域名到服务器</title>
   <link href="/2015/08/02/prepare-my-own-vps2.html"/>
   <updated>2015-08-02T02:58:33+08:00</updated>
   <id>/2015/08/02/prepare-my-own-vps2</id>
   <content type="html">&lt;p&gt;生命不息，折腾不止。此次系列主要记录怎么将自己的域名解析到服务器上。当然，首先，你需要一个域名。这里吐槽下阿里云，我是因为买域名送了买服务器的优惠券才选择购买的阿里云，到头来我要将自己的域名解析到阿里云的时候，阿里云又需要备案域名才可以解析，我购买的服务器的期限是1个月，估计备案域名的时间也需要这么长时间，意味着备案成功后，我的服务器也到期了。那我还解析个毛啊，果断退了阿里云服务器，购买了香港的vps。&lt;/p&gt;

&lt;p&gt;解析域名，当然首推&lt;a href=&quot;https://www.dnspod.cn/&quot;&gt;Dnspod&lt;/a&gt;. 注册也挺方便，直接使用QQ扫描登陆授权就可以了。&lt;/p&gt;

&lt;p&gt;首先需要添加一条域名记录，默认新添加一条记录后是这个样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015/img_prepaer_vps1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;需要把红线框住的两条&lt;code&gt;NS记录&lt;/code&gt;提交到域名提供商那里。因为我的域名是从万网买的，所以要登陆阿里云，点击“修改DNS”，将DNS记录修改为Dnspod提供的那两条记录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015/img_prepaer_vps2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，以后所有域名的操作都可以在Dnspod上搞定了，跟阿里云没有关系了。&lt;/p&gt;

&lt;p&gt;接下来就折腾下怎么把主域名解析到服务器www目录，以及解析一个二级域名到服务器自定义的一个目录。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;解析主域名&lt;/h2&gt;
&lt;p&gt;当我们需要将域名解析到我们服务器的公网ip的时候，就需要在Dnspod上添加记录，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015/img_prepaer_vps3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出，我们在刚才的基础上添加了两条&lt;code&gt;A记录&lt;/code&gt;。A记录的意思是把域名解析到一个ip地址，是符合我们当下的需求的。&lt;/p&gt;

&lt;p&gt;在主机记录栏，分别添加了&lt;code&gt;@&lt;/code&gt;和&lt;code&gt;www&lt;/code&gt;两条，分别对应的意思是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 假设域名是bbbb
@ ： 通过浏览器访问 bbbb.com 会跳转到服务器
www ：通过浏览器访问 www.bbbb.com 会跳转到服务器
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在记录值栏，要添加成服务器的公网ip，假如你的服务器的公网ip是&lt;code&gt;100.200.160.70&lt;/code&gt;, 就填这个地址就可以。&lt;/p&gt;

&lt;p&gt;现在，等dns解析生效，在浏览器中访问自己的域名，应该可以跳转到服务器了。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;解析二级域名&lt;/h2&gt;
&lt;p&gt;假设主域名是bbbb.com, 二级域名是类似&lt;code&gt;wx.bbbb.com&lt;/code&gt;这种。现在的需求是把二级域名也解析到服务器上。还是需要添加记录：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015/img_prepaer_vps4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还是一条&lt;code&gt;A记录&lt;/code&gt;，因为我们需要先把二级域名解析到服务器上，然后在服务器的Apache设置跳转规则，将二级域名跳转到指定目录。&lt;/p&gt;

&lt;p&gt;在主机记录栏，添加了&lt;code&gt;wx&lt;/code&gt;，意思是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 假设域名是bbbb
wx ： 通过浏览器访问 wx.bbbb.com 会跳转到服务器
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在记录值那里还是填服务器的公网ip。
现在等dns解析生效，访问&lt;code&gt;wx.bbbb.com&lt;/code&gt;就会跳转到服务器www目录了。显然这不是我们想要的结果。&lt;/p&gt;

&lt;p&gt;需要指向指定目录，还要更改下Apache的配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi /etc/httpd/conf/httpd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在配置文件末尾添加如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RewriteEngine on
RewriteMap lowercase int:tolower
RewriteMap vhost txt:/etc/httpd/conf/vhost.map
RewriteCond ${lowercase:%{SERVER_NAME}} ^(.+)$
RewriteCond ${vhost:%1} ^(/.*)$
RewriteRule ^/(.*)$ %1/$1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目的是告诉Apache，我们有一个&lt;code&gt;vhost.map&lt;/code&gt;文件，通过这个文件来定义连接到服务器的二级域名该跳转到哪个目录。&lt;/p&gt;

&lt;p&gt;接下来创建在&lt;code&gt;/etc/httpd/conf&lt;/code&gt;这个目录下创建这个文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi vhost.map
// 这个文件下添加下面的记录
wx.bbbb.com /var/www/html/bbbb.com/wx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过这个文件，Apache会把&lt;code&gt;wx.bbbb.com&lt;/code&gt;这个域名解析到我们设置的那个目录去。以后的二级域名跳转规则都可以添加到这个文件下，并且不需要重启Apache服务就可以使之生效。&lt;/p&gt;

&lt;p&gt;现在，通过浏览器访问&lt;code&gt;wx.bbbb.com&lt;/code&gt;就可以跳转到我们刚才设置的那个目录了。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;折腾服务器的这个系列就要先告一段落了，因为刚开始接触这些东西，有些东西并不是很深入，人生路漫漫，以后还要接着折腾。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>折腾自己的服务器系列（一）之配置服务器</title>
   <link href="/2015/07/26/prepare-my-own-vps1.html"/>
   <updated>2015-07-26T19:13:36+08:00</updated>
   <id>/2015/07/26/prepare-my-own-vps1</id>
   <content type="html">&lt;p&gt;生命不息，折腾不止。为了消灭自己的懒惰情绪，增强匮乏感，也正值阿里云服务器打折，遂买了个服务器折腾一下。在这个过程中所遇到的所有问题、难点等均可在网路上找到相关资料，之所以还再写这个系列，一是记录下这个过程，方便以后查询；二是因为网路中很多资料都已过时，故整理出最新可用的资料供需要的人查询。&lt;/p&gt;

&lt;p&gt;So，这个系列大概要做这些事情：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;配置服务器：包括Apache，PHP，MYSQL，FTP，PhpMyAdmin等&lt;/li&gt;
  &lt;li&gt;配置域名：将自己的域名指向服务器，以及设置二级域名等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今天这个系列主要就是记录写如何配置刚购买的服务器。
这里需要说明的是，以下的操作都是基于CentOS6.4版本。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;安装基本的软件服务&lt;/h2&gt;
&lt;p&gt;首先通过远程登录，连接到服务器，因为我用的是Mac，所以直接用ssh命令登录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh ip地址 -l root 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CentOS下推荐适用yum安装软件，故通过下列命令安装我们所需的服务：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 安装Apache服务
yum install -y httpd
// 安装PHP
yum install -y php
// 安装MYSQL
yum install -y mysql-server mysql
// 安装sftp
yum install -y vsftpd 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此，基本的服务都已安装，不得不感叹Linux作为服务器来说，确实比MAC和Windows有优势，安装太方便了。接下来的就是配置下这些服务，让他们运行起来。&lt;/p&gt;

&lt;h2 id=&quot;apache&quot;&gt;配置Apache&lt;/h2&gt;
&lt;p&gt;我们需要修改两个地方，修改配置文件以及在网站根目录创建index.html.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 下面这个目录是配置文件所在目录
vi /etc/httpd/conf/httpd.conf 找到 `#ServerName www.example.com:80`将注释关闭，变成类似这样的`ServerName 服务器的公网ip:80`。

// 下面这个目录是Apache默认的网站目录
cd /var/www/html
touch index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建&lt;code&gt;index.html&lt;/code&gt;后，往里面随便写点东西。
现在在本地浏览器中访问服务器的公网ip，应该就可以看到刚才我们在&lt;code&gt;index.html&lt;/code&gt;中输入的内容了。
需要注意的是阿里云服务器默认是开放&lt;strong&gt;80&lt;/strong&gt;端口的，通过这个命令&lt;code&gt;service iptables status&lt;/code&gt;查看当前防火墙状态:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service iptables status
表格：filter
Chain INPUT (policy ACCEPT)
num  target    prot opt source            destination         
1    ACCEPT    tcp  --  0.0.0.0/0         0.0.0.0/0    tcp dpt:22 
2    ACCEPT    tcp  --  0.0.0.0/0         0.0.0.0/0    tcp dpt:80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到当前服务器已经开放了&lt;strong&gt;80&lt;/strong&gt;端口和&lt;strong&gt;22&lt;/strong&gt;端口。
如果服务器默认没有开放&lt;strong&gt;80&lt;/strong&gt;端口，还需要开放&lt;strong&gt;80&lt;/strong&gt;端口，可以这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 开放80端口 
iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
// 因为要使用sftp，顺便也开放22端口
iptables -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
// 保存
service iptables save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此，Apache的设置就完成了。&lt;/p&gt;

&lt;h2 id=&quot;sftp&quot;&gt;配置SFTP&lt;/h2&gt;
&lt;p&gt;默认的，和Apache一样，sftp的配置文件在这个目录&lt;code&gt;/etc//vsftpd/&lt;/code&gt;下。sftp默认是不允许root用户登录的，因为是我自己的服务器，并不需要别人参与开发，所以就简单的设置下如何配置root用户可以登录（需要说明的是开启root用户会很不安全，因为root用户的权限太大）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// ftpusers中的用户是黑名单用户是不允许从sftp登录的 
vi /etc/vsftpd/ftpusers // 把列表中的root注释
// sftp默认开启userlist_deny，会阻止user_list中的用户
vi /etc/vsftpd/user_list //  把列表中的root注释
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在尝试在客户端通过sftp连接服务器吧。对于Mac电脑，推荐这个软件&lt;a href=&quot;https://filezilla-project.org/download.php?type=client&quot;&gt;Filezilla&lt;/a&gt;，或者给Sublime装个插件，都可以连上服务器了。&lt;/p&gt;

&lt;h2 id=&quot;mysql&quot;&gt;配置MySQL&lt;/h2&gt;
&lt;p&gt;之前的这个步骤&lt;code&gt;yum install -y mysql-server mysql&lt;/code&gt;已经安装了MySQL所需的软件服务。要运行MySQL服务，需要这些命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 启动mysqld服务 要关闭的话将start替换成stop
service mysqld start
// 给root用户设置密码为ab123 默认刚安装的数据库是没有密码的，所以需要先设置密码
mysqladmin -uroot -password ab123
// 连接数据库
mysql -uroot -p
// 提示输入密码后，就可进入mysql命令模式了
// 推出mysql命令模式
// exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于数据库的管理，还是推荐使用phpMyAdmin更加方便些。关于phpmyadmin，可以选择yum安装，也可以直接从&lt;a href=&quot;http://www.phpmyadmin.net/downloads/&quot;&gt;官网&lt;/a&gt;下载。
今天的系列就先到这了，下一系列说说配置域名的事情。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Apple Watch开发系列（一）</title>
   <link href="/2015/07/17/Apple-Watch-Demo-1.html"/>
   <updated>2015-07-17T06:52:36+08:00</updated>
   <id>/2015/07/17/Apple-Watch-Demo-1</id>
   <content type="html">&lt;p&gt;本系列是我依据WWDC15 Session Video以及苹果官方文档写的一个小Demo，涉及的资料有&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://developer.apple.com/videos/wwdc/2015/?id=108&quot;&gt;Building Watch Apps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://developer.apple.com/library/prerelease/watchos/documentation/General/Conceptual/AppleWatch2TransitionGuide/index.html&quot;&gt;AppleWatch2 Transition Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://developer.apple.com/library/prerelease/watchos/documentation/General/Conceptual/WatchKitProgrammingGuide/index.html&quot;&gt;WatchKit Programming Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外需要说明的是本Demo是基于Watch OS 2.0开发的，因为我开始学的时候已经是2.0了，哈哈。在该系列的每篇文章末尾会有一个链接地址，指向这个Demo。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;当然，首先我们要有一个iOS app，因为WatchKit app的bundle是集成与iOS app中的，安装Watch app的时候会把WatchKit app的bundle从iPhone中传输到Watch上。而对于Watch app来说，分为两个部分：WatchKit app(运行在Apple Watch)以及WatchKit extension(运行在iPhone上)。WatchKit app只包含程序UI相关的storyboards和资源文件（比如图片等），而WatchKit extension包含管理和响应UI的代码。
#添加Watch app Target&lt;/p&gt;

&lt;p&gt;和添加一个iOS app target一样的步骤，如果我要添加了一个名为“Watch”的Target，顺序是下面这样的：
&lt;img src=&quot;/assets/2015/img-watchdemo-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择Next以后，需要勾选这些东西：
&lt;img src=&quot;/assets/2015/img-watchdemo-2.png&quot; alt=&quot;&quot; /&gt;
分别解释下这几个选项&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Notification Scene 通知中心：应用程序收到远程或本地通知的时候，手表界面出现的通知布景。&lt;/li&gt;
  &lt;li&gt;Glacne 速览。从表盘界面上拉出现的界面，添加到速览列表后，用户可以通过左右滑动速览界面，看到程序提供的速览界面，提供最重要的信息，不可滚动的，一屏，不可包含可交互元素，点击会启动WatchKit app&lt;/li&gt;
  &lt;li&gt;Complication 特殊功能（或者叫功能栏）：抬起手腕可以在表盘上看见的东西，比如我的表盘上自定义的功能栏有日历、健身活动、定时器等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些按需要勾选，确定以后，在WatchKit app的storyboard中就可以看到以下界面：
&lt;img src=&quot;/assets/2015/img-watchdemo-3.png&quot; alt=&quot;&quot; /&gt;
图中的Main interface就是Watchkit app的主界面了，Glance Interface是速览界面，剩下的Static Interface和Dynamic Interface是连着一起的，可以这样解释：当Watch上收到iPhone的通知的时候，首先会调起程序对应的Static Interface，当用户对通知表示有兴趣，也就是说抬起了手腕想看这条通知的时候，会切换到对应的Dynamic Interface上。&lt;/p&gt;

&lt;p&gt;此次，我们的任务就是把这几个Interface都运行起来，在Watch上看到效果。
#添加界面元素
暂时，我们可以先在各个界面上拖上一些简单的元素。这里需要注意的是Glance Interface上是不允许可交互元素（比如button，switch等）的存在的。
#编译运行
到现在为止，查看Scheme menu可以看到，Xcode已经为我们生成了调试不同界面的Scheme了。要编译运行main Interface我们选中Watch Scheme，就可以在模拟器上看到我们的main Interface了。
Glance和Notification Interface稍微还要费电周折，分别讲一下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Glance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要选择iOS app的target对应的Scheme，编译运行，在iPhone的“Watch”应用中，进入我们新建的iOS app设置界面，选中“Show In Glance”（在速览中显示）。然后回到Watch模拟器，从表盘界面往上滑动，再往右滑动，就可以看到我们创建的速览界面了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Notification Scene&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在工程的“Edit Scheme”中，选择编辑“Notification-Watch”:
&lt;img src=&quot;/assets/2015/img-watchdemo-4.png&quot; alt=&quot;&quot; /&gt;
有两个地方需要注意：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Watch Interface 可以切换Static Notification和Dynamic Notification来分别调试不同场景下的通知视图。当然可以通过左下角的Duplicate Scheme来复制一个Scheme，这样就分别有了Static Notification和Dynamic Notification对应的Scheme了。&lt;/li&gt;
  &lt;li&gt;Notification Payload 在Watch Extension文件夹下的Support Fils下有一个名为“PushNotificationPayload.apns”的文件。这个文件是Xcode为我们自动生成的，因为模拟器不支持推送，所以通过这个文件模拟一个推送。我们可以修改这个文件的内容，以及创建新的payload文件，然后再来调试我们的程序。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在我们选中Static Notification的Scheme来编译运行，就可以看到模拟器上收到的通知内容为“Test Message”，而这个文字是从PushNotificationPayload.apns这个文件中读写出来的。&lt;/p&gt;

&lt;p&gt;然后再选中Dynamic Notification的Scheme来编译运行，发现怎么还是刚才的通知，现在我们要移步到NotificationController.m这个文件下，将一下代码的注释打开&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;didReceiveRemoteNotification:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;remoteNotification&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withCompletion:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WKUserNotificationInterfaceType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;completionHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This method is called when a remote notification needs to be presented.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Implement it if you use a dynamic notification interface.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Populate your dynamic notification interface as quickly as possible.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// After populating your dynamic notification interface call the completion block.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WKUserNotificationInterfaceTypeDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后我们需要把下面这行代码中的”WKUserNotificationInterfaceTypeDefault”替换为”WKUserNotificationInterfaceTypeCustom”，然后重新编译运行，就发现我们定制的Dynamic Notification出现在屏幕上了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;completionHandler(WKUserNotificationInterfaceTypeDefault);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-1&quot;&gt;下期预告&lt;/h1&gt;
&lt;p&gt;今天的系列就先到这里，下一系列讲讲怎么创建一个功能栏，就是抬腕可以在表盘上看见的那个东西。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;惯例：&lt;a href=&quot;https://github.com/red3/WatchDemo/archive/master.zip&quot;&gt;点击这里下载Demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;重要：因为博客暂时没有评论区，如果你对本文有什么疑惑，或者你发现本文由存在错误的地方，非常欢迎你联系我指出。QQ：309333018，WeiChat：flipgo&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>为什么我们需要Present这种模态推出视图的方式？</title>
   <link href="/2015/07/11/why-we-use-present-or-push.html"/>
   <updated>2015-07-11T18:37:36+08:00</updated>
   <id>/2015/07/11/why-we-use-present-or-push</id>
   <content type="html">&lt;p&gt;iOS开发者都知道，推出新页面有两种方式，一种是导航Push，另一种是视图本身Present另一个视图。一般的应用程序都是UITabBarController+4个UINavigationController，然后每个导航Push或者Pop就解决了问题。&lt;/p&gt;

&lt;p&gt;这次引发我思考的是佳缘经纪人项目中要添加银行卡的一个功能：这个功能有两个入口，第一个入口是从导航栈中的某个视图Push出的（非根视图），第二个入口是从导航的根视图Push出的。这个功能本身又需要分2个步骤，验证手机收到的验证码以及输入银行卡号，是两个页面。这样在成功添加银行卡号后要跳转到发起该请求的页面的时候可以这样：
- 如果是根视图：PopToRootViewController
- 如果不是根视图：先找到导航栈中的那个控制器，然后PopToViewController：
从流程上讲：它应该是这个样子&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015/broker_add_bankCard.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么问题来了，如果哪天这个功能还要有一个入口，在Pop回去的地方就又要多加判断，意味着这个流程里面就有了很多垃圾代码去判断是从哪个页面来的。这个时候我开始考虑，这样的设计可能是存在问题的。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;微信&lt;/h3&gt;

&lt;p&gt;意识到这个问题的时候，我在想，有类似流程设计的肯定不止一家，其实是可以参考其他软件是怎么设计的。于是花费了时间，看了看微信在类似的场景的设计。下图是微信的更换绑定手机号的流程截图，其实“更换手机号”这个页面是“绑定手机号”这个页面Present出的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015/wechat_change_phone.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ios&quot;&gt;苹果在iOS框架中的设计&lt;/h3&gt;

&lt;p&gt;其实苹果自己设计的UIImagePickerController就是一个值得参考的例子。
它的流程是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015/ios_imagePicker.png&quot; alt=&quot;&quot; /&gt;
“Photos”这个页面是被Present出的，并且在Xcode中可以看到UIImagePickerController是继承自UINavigationController的。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;因此&lt;/h3&gt;

&lt;p&gt;可以看出，iOS框架和微信App中，在做这样的操作的时候（这个操作一般可以表述为：需要用户去输入，去选择，去编辑。这个操作一般还涉及好几个步骤，好几个页面），一般用Present的方式模态出一个导航栈出来。而这样做的具体优点为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;流程中，用户想放弃编辑，通过导航中的“取消”，可以随时Dismiss这个导航栈，然后回到发起这个功能的页面。而相比直接用导航Push这一系列流程的时候，用户想放弃编辑，只能通过导航中的“返回”一步一步返回了。&lt;/li&gt;
  &lt;li&gt;用户完成操作的自动跳转，可以通过Dismiss直接回到页面发起的地方。而相比直接用导航Push这一系列流程的方式，要写一堆代码判断到底应该Pop回哪个页面。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以参照这些，我把红娘经纪人中添加银行卡的步骤设计成类似的流程。同样的，我们添加银行卡的这个流程也有这样一个协议，用来表明是添加银行卡成功了还是取消了这次添加。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@protocol UIImagePickerControllerDelegate&amp;lt;NSObject&amp;gt;
@optional
// The picker does not dismiss itself; the client dismisses it in these callbacks.
// The delegate will receive one or the other, but not both, depending whether the user
// confirms or cancels.
- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary&amp;lt;NSString *,id&amp;gt; *)info;
- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在回头看微信更换绑定手机的设计，其实也是有点瑕疵的：在“填写验证码”这个环节，缺少“取消”的按钮，如果用户想放弃这次更换手机号的操作，只能先返回到上级界面再点击“取消”了。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;最后说一点&lt;/h3&gt;

&lt;p&gt;最近读郝培强（tiny4voice）微信公众号中的一篇文章很有感悟，文章最后说：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;我大家的自主努力，不是坚持，不是在泥潭里坚持，
而是积累，积累改进，积累思考，要跳出泥潭，掌控工作，掌控生活，掌控自己
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以我想我们在开发中不要总是一味去照搬以前的方式去蛮干，而要思考，有没有更好的方式。经常的，还要回过头来看看自己写的代码，到底设计得是不是够好，够规范，够易维护。这样才能有所积累。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>WWDC2015 Session笔记-App Thinning</title>
   <link href="/2015/07/05/WWDC-2015-APP-Thinning.html"/>
   <updated>2015-07-05T06:45:36+08:00</updated>
   <id>/2015/07/05/WWDC-2015-APP-Thinning</id>
   <content type="html">&lt;p&gt;本文是我依据 WWDC15 Session Video 写的一篇笔记，涉及的 Session 有&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://developer.apple.com/videos/wwdc/2015/?id=404&quot;&gt;App Thinning in Xcode&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;重要&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;苹果指出，使用App-Thinning的前提是使用Asset Catalog管理资源文件&lt;/li&gt;
  &lt;li&gt;在苹果的演示中，一个约74M的应用程序经过Thinning后变为约22M，效果还是很惊人的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;我们需要了解的&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;如何使应用程序的体积变得越小&lt;/li&gt;
  &lt;li&gt;开发和提交应用程序的时候需要做些什么以使App-Thinning生效&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;work-flow&quot;&gt;Work Flow&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;创建&lt;/h3&gt;

&lt;p&gt;苹果说明必须使用Asset Catalog管理资源文件才可以使App-Thinning生效，Xcode7.0以前新建的默认工程里面有Images.xcassets这个文件夹是管理图片资源的，Xcode7.0以后默认生成Assets.xcassets文件夹，用来管理Image Set、Data Set以及Sprite Atlas，看来以前使用自己创建的文件夹方式管理图片的同学要尽快迁移到Assets下，迁移的方式也很简单，
选中工程中的Images.xcassets文件夹，然后选中文件目录树下方的”+”，然后选择”Import From Project”，这是Xcode已经自动把工程中的全部图片选中。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;编译&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Xcode在编译运行的时候能够自动根据当前选中设备（模拟器或者真机都可以）选择适合设备的资源&lt;/li&gt;
  &lt;li&gt;如果不想使用App-Thinning，可以在build setting中Asset Catalog Compiler中更改Enable_Building_Only_Active_Resources这个选项，默认设置是YES&lt;/li&gt;
  &lt;li&gt;速度提升，因为运行的时候，只会把适合当前设备的资源文件进行拷贝，以前是一股脑的都拷贝了&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;提交&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;如果是提交到AppStore，和以往一样提交就行&lt;/li&gt;
  &lt;li&gt;Ad-hoc/Enterprise Distribution可以根据设备导出对应的ipa文件&lt;/li&gt;
  &lt;li&gt;企业证书通过Over-the-Air安装，也就是采用itms-service协议直接通过浏览器安装的时候，需要勾选”Include manifest for over-the-air installation”选项，这样不同的设备会自动对应到适应的安装包&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015/ad-hoc-app-thinning.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;应该说给App瘦身这件事是近几年呼声挺高的一件事，而今年在Xcode7上苹果加入了这个功能，并且可以让开发者以极其小的付出就可以拥抱这次变化，可谓大快人心！&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>iOS进阶读书笔记</title>
   <link href="/2015/07/03/readNotes-about-iOSPro.html"/>
   <updated>2015-07-03T06:45:36+08:00</updated>
   <id>/2015/07/03/readNotes-about-iOSPro</id>
   <content type="html">&lt;p&gt;最近读了下&lt;a href=&quot;www.devtang.com&quot;&gt;唐巧&lt;/a&gt;写的《iOS进阶》， 补全了很多iOS开发的盲点，总结下自己在开发过程中认知不足的地方。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GET请求(为何涉及加密传输比如登陆注册不可以用GET请求):GET请求会在浏览器地址栏暴漏网址，然而在客户端不存在这个问题，所以可能有人觉得用不用GET都无所谓，现在知道GET请求会出现在服务器的access log，这是相当危险的。&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS数据持久化的思考</title>
   <link href="/2015/06/25/iOS-save-local-data.html"/>
   <updated>2015-06-25T06:19:36+08:00</updated>
   <id>/2015/06/25/iOS-save-local-data</id>
   <content type="html">&lt;h3 id=&quot;section&quot;&gt;缘由&lt;/h3&gt;

&lt;p&gt;之前做佳缘一对一iOS App的时候，需要解决网络数据做离线缓存，现在红娘经纪人项目考虑用数据库作为缓存解决方案。后来觉得有必要思考下数据持久化该采取的方案。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;说到数据持久化，到底有哪些方案可以采取&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;NSUserDefault&lt;/li&gt;
  &lt;li&gt;NSKeyedArchive&lt;/li&gt;
  &lt;li&gt;Write To File (NSString, NSArray, NSData, NSDictionary)&lt;/li&gt;
  &lt;li&gt;数据库
当数据有本地存取的需求的时候，如何保证数据在本地的合理安排？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;应该采取哪种方案&lt;/h3&gt;

&lt;h3 id=&quot;section-3&quot;&gt;业界是怎么做的&lt;/h3&gt;

&lt;p&gt;-&lt;a href=&quot;https://github.com/yuantiku/YTKKeyValueStore&quot;&gt;YTKKeyValueStore&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;www.devtang.com&quot;&gt;唐巧&lt;/a&gt;开源的基于sqlite的Key-Value式的存储，猿题库的项目采用该方案。&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://github.com/casatwy/SQLiteManager4iOS&quot;&gt;SQLiteManager4iOS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://casatwy.com/&quot;&gt;casatwy&lt;/a&gt;基于SQLiteMananger这个repo做的迁移方案，解决版本迁移问题。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Mac OS X 中为Apache开启ssl</title>
   <link href="/2015/06/24/Mac-OS-ssl.html"/>
   <updated>2015-06-24T06:19:36+08:00</updated>
   <id>/2015/06/24/Mac-OS-ssl</id>
   <content type="html">&lt;p&gt;最近由于工作需要，需要给Mac本地的Apache配置ssl环境，折腾了一下午，终于解决了，把过程记录下来，留给有需要的人。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;生成ssl证书&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;生成主机密匙 （’ssl’这个文件夹可以随意起名字，只要在后面的设置中保持一致即可）&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; sudo mkdir /private/etc/apache2/ssl
 cd /private/etc/apache2/ssl
 sudo ssh-keygen -f server.key
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;生成证书请求文件（这个过程感觉跟iOS生成开发证书类似）&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; sudo openssl req -new -key server.key -out request.csr
 	// 这个过程中会让输入一些证书机构的信息，按照提示或者留空就行
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用server.key 和 request.csr 生成ssl证书&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; sudo openssl x509 -req -days 365 -in request.csr -signkey server.key -out server.crt
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;配置Apache&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;编辑httpd.conf文件&lt;/p&gt;

    &lt;p&gt;sudo vi /private/etc/apache2/httpd.conf&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;去掉下面四行前面的 ‘#’&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;LoadModule ssl_module libexec/apache2/mod_ssl.so&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;LoadModule socache_shmcb_module libexec/apache2/mod_socache_shmcb.so&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;Include /private/etc/apache2/extra/httpd-ssl.conf&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;Include /private/etc/apache2/extra/httpd-vhosts.conf&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;编辑httpd-ssl.conf文件&lt;/p&gt;

    &lt;p&gt;sudo vi /private/etc/apache2/extra/httpd-ssl.conf&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;将以下两行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SSLCertificateFile &quot;/private/etc/apache2/server.crt&quot;

SSLCertificateKeyFile &quot;/private/etc/apache2/server.key&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分别修改为：（需要注意的是ssl文件夹为第1步创建的文件夹）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SSLCertificateFile &quot;/private/etc/apache2/ssl/server.crt&quot;

SSLCertificateKeyFile &quot;/private/etc/apache2/ssl/server.key&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要注意的是该文件68行的代码会在Apache运行的时候报错&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SSLMutex  &quot;file:/private/var/run/ssl_mutex&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查找网上的解决方案是将这行代码注释，不知道会不会带来安全隐患，烦请知道的同学告知。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;编辑httpd-vhosts.conf文件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在文件末尾添加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:443&amp;gt; 
SSLEngine on
SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
SSLCertificateFile /private/etc/apache2/ssl/server.crt 
SSLCertificateKeyFile /private/etc/apache2/ssl/server.key
ServerName localhost
// copy your DocumentRoot setting in httpd.conf to here
DocumentRoot &quot;/Users/$yourName/Sites&quot;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时需要注意，httpd-vhosts.conf文件里面有个默认的 &amp;lt;VirtualHost *:80&amp;gt;标签， 不做修改的话，访问localhost会报错:The Request / Not Found&lt;/p&gt;

&lt;p&gt;这是因为&amp;lt;VirtualHost *:80&amp;gt;里的设置会覆盖以前单站点模式下的设置, 所以要把该文件里的一些设置同步过来, 我把他修改成这样:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
ServerAdmin xxx@example.com
// copy your DocumentRoot setting in httpd.conf to here
DocumentRoot &quot;/Users/$yourName/Sites&quot;
ServerName localhost
ErrorLog &quot;/private/var/log/apache2/error_log&quot;
CustomLog &quot;/private/var/log/apache2/access_log&quot; common
&amp;lt;/VirtualHost&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进行到这里就配置完了，重启Apache，访问https://localhost试试吧！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apachectl configtest
sudo apachectl restart
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;后记&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实最近折腾这个主要是为了练习iOS应用框架中使用SSL加密以及实现iOS自动打包至服务器使用itms-service协议自动安装至手机的过程，然而由于服务器缺少https环境，本地https又缺少SA认证，尚未实现，权当给自己挖个坑，钻研钻研吧！&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/y500/p/3596473.html&quot;&gt;http://www.cnblogs.com/y500/p/3596473.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/13969272/apache-sslmutex-issue&quot;&gt;http://stackoverflow.com/questions/13969272/apache-sslmutex-issue&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 
</feed>
